{"majorversion": 2, "classmap": {"": {"name": "", "namespace": "", "private": "", "provides": "FB.Loader", "methods": {"_mergeIndexQuery": {"description": "Check if y can be merged into x", "guessedname": "_mergeIndexQuery", "guessedtype": "function"}, "_check": {"return": {"type": "", "description": "true if it is done"}, "description": "Check if a request if fullfilled", "guessedname": "_check", "guessedtype": "function"}, "subclass": {"params": [{"type": "string", "name": "name", "description": " class name"}, {"type": "string", "name": "baseName,", "description": ""}, {"type": "function", "name": "constructor", "description": " class constructor"}, {"type": "object", "name": "proto", "description": " instance methods for class"}], "description": "Create a subclass\n Note: To call base class constructor, use this._base(...).\n If you override a method 'foo' but still want to call\n the base class's method 'foo', use this._callBase('foo', ...)", "guessedname": "subclass", "guessedtype": "function"}, "onScriptLoaded": {"description": "This function will be invoked at end of each connect.php load", "guessedname": "onScriptLoaded", "guessedtype": "function"}, "eval": {"data": "a list of objects that needs to be evaluted when they are ready", "params": [{"type": "string | function", "name": "a", "description": " string or a function will be evaluated when all data are ready"}], "guessedname": "eval", "guessedtype": "function"}, "loadCssComps": {"params": [{"type": "", "name": "String", "description": " cssSrc"}], "description": "TODO: Move this off to a different component", "guessedname": "loadCssComps", "guessedtype": "function"}, "Class": {"params": [{"type": "string", "name": "name", "description": " class name"}, {"type": "function", "name": "constructor", "description": " class constructor"}, {"type": "object", "name": "proto", "description": " instance methods for class"}], "description": "Create a new class.\n Note: I have to use 'Class' instead of 'class' because 'class' is\n a reserved (but unused) keyword.", "guessedname": "Class", "guessedtype": "function"}, "wait": {"description": "Given a list of potential async data,\n wait until they are all ready", "guessedname": "wait", "guessedtype": "function"}}, "file": "loader.js", "shortname": "", "description": "This base loader that does housekeeping of loaded components and support\n automatic loading of required css for a a component."}, "FB.XdComm": {"name": "FB.XdComm", "constructors": [{"params": [{"type": "String", "name": "rpcServerName", "description": "\n Name of the server"}, {"type": "Object", "name": "registeredMethodMap", "description": "\n Methods to register as \"legal\" to be\n called from this server"}], "description": "Register an RPC service. This allow us backward compatibility that would make migration from v1\n smoother since we will have to support both for some time."}], "namespace": "", "private": "", "provides": "FB.XdComm", "methods": {"decode": {"return": {"type": "", "description": "String"}, "params": [{"type": "String", "name": "data", "description": ""}], "description": "Custom decoding to workaround bug in flash's ExternInterface\n Code is from Dojo's library", "guessedname": "decode", "guessedtype": "function"}, "onReceiverLoaded": {"params": [{"type": "String", "name": "hash", "description": ""}], "description": "This method should be called by XdCommReceiver.js only!", "guessedname": "onReceiverLoaded", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "Optional", "description": " xd receiver url"}], "description": "Initialize XdComm", "guessedname": "init", "guessedtype": "function"}, "getUdp": {"return": {"type": "", "description": "String"}, "params": [{"type": "function", "name": "callback", "description": ""}, {"type": "Object", "name": "data", "description": "\n data to send."}, {"type": "FB.XdComm.EndPoint", "name": "endPoint", "description": "\n target to send message to"}, {"type": "FB.XdComm.PacketDataFormat", "name": "dataFormat", "description": "\n format of data attached to string, default JSON"}], "description": "Create an url that can be used to send a UDP like single message to\n the specified end point when this url is opened.", "guessedname": "getUdp", "guessedtype": "function"}}, "file": "xdcomm.js", "shortname": "FB.XdComm", "properties": {"receiverUrl": {"type": "String", "guessedname": "receiverUrl", "guessedtype": "property"}, "_id": {"type": "String", "guessedname": "_id", "guessedtype": "property"}}, "description": "Server for cross domain communication"}, "FB.UI.PopupWin": {"name": "FB.UI.PopupWin", "namespace": "", "provides": "FB.UI.PopupWin", "file": "popupdlg.js", "shortname": "FB.UI.PopupWin", "methods": {"close": {"description": "Close this popup window", "guessedname": "close", "guessedtype": "function"}}}, "FB.XFBML": {"name": "FB.XFBML", "namespace": "", "provides": "FB.XFBML", "methods": {"parse": {"params": [], "description": "Parse and render XFBML markup inside a DOM element", "guessedname": "parse", "guessedtype": "function"}, "_processElement": {"private": "", "description": "Process an XFBML element", "guessedname": "_processElement", "guessedtype": "function"}, "set": {"params": [{"type": "DOMElement", "name": "dom", "description": "  DOM element"}, {"type": "string", "name": "markup", "description": " XFBML markup. It may contain reguarl HTML markup as well."}], "description": "Set XFBML markup on a given DOM node. This is like\n setInnerHTML\n Example: FB.XFBML.set($('container', '<fb:name uid=\"4\"></fb:name><div>.....')", "guessedname": "set", "guessedtype": "function"}, "_getDoms": {"return": {"type": "", "description": "DOMElementCollection"}, "params": [{"type": "Object", "name": "element", "description": ""}, {"type": "String", "name": "xmlns", "description": ""}, {"type": "String", "name": "localName", "description": ""}], "guessedname": "_getDoms", "private": "", "guessedtype": "function"}, "registerTag": {"params": [{"type": "object", "name": "An", "description": " array of the format ['<xmls-namespace>', '<tag-name>',\n       '<name of the JS class that implements the tag>']"}], "description": "Register a custom XFBML Tag\n Example: FB.XFBML.registerTag('digg', 'digg-button', 'Digg.DiggButton'])", "guessedname": "registerTag", "guessedtype": "function"}}, "file": "xfbml.js", "shortname": "FB.XFBML", "description": "This provides public APIs for developer to programming XFBML"}, "FB.IframeResizer": {"name": "FB.IframeResizer", "namespace": "", "private": "", "provides": "foo", "file": "foo.js", "shortname": "FB.IframeResizer", "description": "This class enable service to allow iframe to request size changes"}, "FB.Api": {"name": "FB.Api", "namespace": "", "provides": "FB.Api", "methods": {"_invokeUi": {"guessedname": "_invokeUi", "params": [{"type": "String", "name": "method", "description": "\n API method to call"}, {"type": "Object", "name": "parameters", "description": "\n parameters corresponding to the method"}, {"type": "function", "name": "callback", "description": " callback function. The API result will passed to\n          callback function when result is read."}, {"type": "object", "name": "options", "description": " [Optional]"}], "description": "Calls the specified Facebook UI method with given parameters", "private": "", "guessedtype": "function"}, "_invokeRest": {"guessedname": "_invokeRest", "params": [{"type": "String", "name": "method", "description": "\n API method to call"}, {"type": "Object", "name": "parameters", "description": "\n parameters corresponding to the method"}, {"type": "", "name": "callback", "description": ""}, {"type": "", "name": "options", "description": "\n optional options"}], "description": "Make a REST Api call", "private": "", "guessedtype": "function"}, "invoke": {"params": [{"type": "String", "name": "method", "description": "\n API method to call"}, {"type": "Object", "name": "parameters", "description": "\n parameters corresponding to the method"}, {"type": "", "name": "callback", "description": ""}, {"type": "", "name": "options", "description": "\n optional options"}], "description": "Calls the specified Facebook API method with given parameters, or\n queues it on the Sequencer.", "guessedname": "invoke", "guessedtype": "function"}}, "file": "api.js", "shortname": "FB.Api", "properties": {"mSessions": {"private": "", "description": "map of methods that requires session.\n [TODO] Complete the list", "guessedname": "mSessions", "guessedtype": "property"}, "_callId": {"type": "Number", "guessedname": "_callId", "guessedtype": "property"}}, "description": "This module provides unified API access (both REST and UI)"}, "FB.Util": {"name": "FB.Util", "namespace": "", "provides": "FB.Util", "file": "util.js", "shortname": "FB.Util", "properties": {"FB": {"description": "Provide a lowest level base functions for Connect JS. We should only place\n commonly used generally purpose methods in this namespace\n Every methods in this file are in FB namespace.", "guessedname": "FB", "guessedtype": "property"}, "base_url_format": {"description": "base_url_format:'http://{0}.facebook.com/',\nbase_cdn_url:'http://static.ak.fbcdn.net/',\nxd_comm_swf_url:'http://www.wzhu-git.devrs002.facebook.com/swf/XdComm.swf'", "guessedname": "base_url_format", "guessedtype": "property"}}, "methods": {"getFacebookUrl": {"return": {"type": "", "description": "String"}, "params": [{"type": "String", "name": "subDomain", "description": "\n Subdomain of Facebook to use"}], "description": "Gets a reference to the statically stored base Facebook URL, and adjusts for the desired subdomain.", "guessedname": "getFacebookUrl", "guessedtype": "function"}, "format": {"description": "Format a string\n Example:FB.Util.format('{0}.facebook.com/{1}', 'www', 'login.php') returns\n 'www.facebook.com/login.php'", "guessedname": "format", "guessedtype": "function"}, "provide": {"access": "protected", "params": [{"type": "String", "name": "name", "description": "      a dot separated string naming the feature"}, {"type": "Object", "name": "feature", "description": "   the feature being provided"}, {"type": "Boolean", "name": "append", "description": "   indicate if an existing object should be\n                          appended defaults to false. this need to be\n                          explicit to detect inadvertent redefinition of\n                          features."}], "description": "Provide a module or static class methods with fully qualified namespace. The name\n is a dot separated string. The feature is an object from which\n properties are _copied_ into the target.\n Example:\n FB.provide('Server.Auth', {\n   init: function() {\n     // ...\n   }\n });\n    *", "guessedname": "provide", "guessedtype": "function"}, "bind": {"description": "Bind a function to a given context and arguments.", "access": "protected", "returns": "{Function}   the bound function", "params": [{"type": "Function", "name": "fn", "description": "         the function to bind"}, {"type": "Object", "name": "context", "description": "      object to be used as the context when\n                             calling the function"}], "guessedname": "bind", "guessedtype": "function"}, "create": {"return": {"type": "", "description": "object  The created object, or boolean if testOnly is true."}, "description": "Create a namespaced object\n This create an fullly namespaced name.\n Examples:\n FB.create('XFBML.ProfilePic') = function() {...}\n   create FB.XFBML.ProfilePic and assign the value of the function. If FB.XFBML does not exist, this call\n   would automatically create it.\n FB.create('Util');\n   create a namespace FB.Util if it doesn't already exist;\n FB.create('Util.foo', null, true)\n   Check if FB.Util.foo exists", "access": "private", "params": [{"type": "string", "name": "name", "description": " full qualified name ('Util.foo', etc.)"}, {"type": "bool", "name": "testOnly", "description": "  [optional] This is an optional parameter. If set to true, then the function\n                  will"}], "guessedname": "create", "guessedtype": "function"}, "obj2array": {"description": "Create an array from the keys in an object\n Example: obj2array({'x': 2, 'y': 3'}) returns ['x', 'y']", "guessedname": "obj2array", "guessedtype": "function"}, "createUnique": {"description": "Create an unique id string", "guessedname": "createUnique", "guessedtype": "function"}, "copy": {"access": "protected", "params": [{"type": "Object", "name": "target", "description": "      the target object where things will be copied\n                            into"}, {"type": "Object", "name": "source", "description": "      the source object where things will be copied\n                            from"}, {"type": "Boolean", "name": "overwrite", "description": "  indicate if existing items should be\n                            overwritten"}, {"type": "function", "name": "tranform", "description": "   [Optional], transformation function for each item"}], "description": "Copies things from source into target.", "guessedname": "copy", "guessedtype": "function"}, "forEach": {"params": [{"type": "", "name": "item", "description": "   Variant   an Array or an Object"}, {"type": "", "name": "fn", "description": "     Function  the callback function for iteration"}, {"type": "", "name": "proto", "description": "  Boolean   indicate if properties from the prototype should\n                         be included"}], "description": "For looping through Arrays and Objects.", "guessedname": "forEach", "guessedtype": "function"}}}, "FB.UI.Dialog": {"name": "FB.UI.Dialog", "namespace": "", "provides": "FB.UI.Dialog", "methods": {"getContainer": {"return": {"type": "", "description": "Object"}, "description": "_popupContainer", "guessedname": "getContainer", "guessedtype": "function"}}, "file": "dialog.js", "shortname": "FB.UI.Dialog", "description": "An iframe dialog"}, "FB.XFBML.ProfilePic": {"name": "FB.XFBML.ProfilePic", "namespace": "", "provides": "FB.XFBML.ProfilePic", "extends": "FB.XFBML.Element", "superclass": "FB.XFBML.Element", "file": "profilepic.js", "shortname": "FB.XFBML.ProfilePic"}, "FB.Uri": {"name": "FB.Uri", "namespace": "", "private": "", "provides": "FB.Uri", "methods": {"createQueryString": {"return": {"type": "", "description": "String"}, "params": [{"type": "Object", "name": "q_params", "description": "\n the dictionary"}, {"type": "function", "name": "optional", "description": " encoder for values"}], "description": "Given a dictionary mapping name to param\n returns a query string with encoded values.", "guessedname": "createQueryString", "guessedtype": "function"}, "getQueryParameters": {"description": "Decode a query string into a parameters object.", "access": "private", "returns": "{Object} the parameters to encode", "params": [{"type": "String", "name": "str", "description": "  the query string"}], "guessedname": "getQueryParameters", "guessedtype": "function"}}, "file": "uri.js", "shortname": "FB.Uri", "description": "Uri related functions\n Note: I am creating a separate Uri component instead of putting it into\n FB.Util because I expect that we will add more Uri related methods back\n over time."}, "FB.Dom": {"name": "FB.Dom", "namespace": "", "provides": "FB.Dom", "methods": {"getWindowSize": {"return": {"type": "", "description": "FB.Size"}, "description": "Get browser window size\n windowSize", "guessedname": "getWindowSize", "guessedtype": "function"}, "removeCss": {"params": [{"type": "Object", "name": "dom", "description": ""}, {"type": "String", "name": "className", "description": ""}], "guessedname": "removeCss", "guessedtype": "function"}, "createHiddenIFrame": {"description": "Create a hidden iframe", "guessedname": "createHiddenIFrame", "guessedtype": "function"}, "removeDom": {"params": [{"type": "Object", "name": "element", "description": ""}], "description": "Remove a dom element from dom tree", "guessedname": "removeDom", "guessedtype": "function"}, "addCss": {"params": [{"type": "Object", "name": "dom", "description": ""}, {"type": "String", "name": "newClass", "description": ""}], "guessedname": "addCss", "guessedtype": "function"}, "addScript": {"description": "Dynamically add a script tag", "guessedname": "addScript", "guessedtype": "function"}, "getBrowserType": {"return": {"type": "", "description": "string 'ie' | 'mozilla' |'safari' | 'other'"}, "description": "Get browser type", "guessedname": "getBrowserType", "guessedtype": "function"}, "getWindowLocation": {"return": {"type": "", "description": "FB.Point"}, "description": "Get location of the browser window relative to computer screen\n windowLocation", "guessedname": "getWindowLocation", "guessedtype": "function"}, "containsCss": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "Object", "name": "dom", "description": ""}, {"type": "String", "name": "className", "description": ""}], "guessedname": "containsCss", "guessedtype": "function"}}, "file": "dom.js", "shortname": "FB.Dom", "description": "This provides helper methods related to DOM"}, "FB.App": {"name": "FB.App", "namespace": "", "provides": "FB.App", "methods": {"monitor": {"params": [{"type": "string", "name": "name", "description": " Name of event. possible values are 'session', 'status', 'init'"}, {"type": "function", "name": "callback", "description": " A callback function. arguments may be passed to the callback.\n     If the callback function returns true, the event will be unsubscribed."}, {"type": "bool", "name": "no_sync_callback", "description": " By default, the callback will be invoked immediately before\n    the event is fired, unless this parameter specified a true value"}, {"type": "bool", "name": "auto_unsubscribe", "description": " By default, the callback will be invoked whenever the event fires.\n      However, if this parameter value is true, the callback will be unsubscribed from the event after\n      it is fired once."}], "description": "Watch for changes in FB.App.", "guessedname": "monitor", "guessedtype": "function"}, "_checkStatus": {"private": "", "description": "This function create an hidden iframe to login_status.lphp", "guessedname": "_checkStatus", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "apiKey", "description": "\n API key for your Facebook application"}, {"type": "Object", "name": "settings", "description": "\n An optional dictionary of other application settings.\n Currently supported key/value are:"}], "description": "initialize an Facebook app. xdChannelUrl parameter may not be needed if stats shows postMessage and flash XdComm have enough coverage", "guessedname": "init", "guessedtype": "function"}, "logout": {"params": [{"type": "function", "name": "callback", "description": " This function will be called when operation is completed"}], "description": "Log out of current session and facebook if current session.\n Note this method is a separate component because logout method\n is not always needed.", "guessedname": "logout", "guessedtype": "function"}, "connect": {"params": [{"type": "function", "name": "callback", "description": " Callback to be invoked after connect result is known"}, {"type": "object", "name": "options", "description": ""}], "description": "Add connect method to FB.App\n This method is in a separate component because App's don't always\n need to call connect method.", "guessedname": "connect", "guessedtype": "function"}, "_onStatus": {"private": "", "description": "callback handler when status string returned from somewhere (login_status,\n login.php, etc.) Our existing wire prototype is not clean (not JSON\n encoded), so we basically do some simple parsing for now.", "guessedname": "_onStatus", "guessedtype": "function"}}, "file": "app.js", "shortname": "FB.App", "properties": {"status": {"type": "string", "description": "current connect status. Note we use undefined\n to signal that we don't know yet", "guessedname": "status", "guessedtype": "property"}, "session": {"type": "object", "description": "current session.\n When session exists, it is standard session structure that contains session_key,\n uid, session_secret, expire_time\n Note we use undefined\n to signal that we don't know yet", "guessedname": "session", "guessedtype": "property"}, "settings": {"type": "object", "description": "A dictionary of advanced facebook settings.\n Currently supported key/value are:", "guessedname": "settings", "guessedtype": "property"}}, "description": "This module provides application settings, states (session states, permissions, etc.) and auth related\n methods (connect, logout)"}, "FB.Delegate": {"name": "FB.Delegate", "namespace": "", "private": "", "provides": "FB.Event", "file": "event.js", "shortname": "FB.Delegate"}, "FB.Event": {"name": "FB.Event", "namespace": "", "private": "", "provides": "FB.Event", "methods": {"fire": {"params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event"}, {"type": "object", "name": "args0,", "description": " .., argN arguments to be passed to callback\n functions\n   that subscribed to the event"}], "description": "Fire an event on the given object", "guessedname": "fire", "guessedtype": "function"}, "add": {"params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event"}, {"type": "function", "name": "callback", "description": " A callback function.\n arguments may be passed to the callback. If the callback function\n returns true, the event will be subscribed."}], "description": "Subscribe to an event on the given object\n Example:\n FB.Event.add(FB.App, 'session', function(session) {\n   if (session) {\n     // Yeah!. User is connected\n     ...\n     return true; // I don't need to listen anymore\n   }\n   // Hmm. no session. Keep listening\n }", "guessedname": "add", "guessedtype": "function"}, "monitor": {"params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event."}, {"type": "function", "name": "callback", "description": " A callback function. arguments may be passed to the callback.\n     If the callback function returns true, the event will be unsubscribed."}, {"type": "bool", "name": "no_sync_callback", "description": " By default, the callback will be invoked immediately before\n    the event is fired, unless this parameter specified a true value"}, {"type": "bool", "name": "auto_unsubscribe", "description": " By default, the callback will be invoked whenever the event fires.\n      However, if this parameter value is true, the callback will be unsubscribed from the event after\n      it is fired once."}], "description": "Watch for changes", "guessedname": "monitor", "guessedtype": "function"}, "remove": {"params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event"}, {"type": "function", "name": "callback", "description": " previous callback function passed to\n        FB.Event.add"}], "description": "Unsubscribe to an event on the given object. Note you can also unsubscribe an event\n by simply return true in the callback function provided to FB.Event.subscribe.\n Example:\n FB.Event.add(FB.App, 'connectState', mycallback);\n ...\n // Dont' need to subscribe to the event anymore\n FB.Event.remove(FB.App, 'connectState', mycallback);", "guessedname": "remove", "guessedtype": "function"}}, "file": "event.js", "shortname": "FB.Event", "description": "Basic Event system"}, "FB.JSON": {"name": "FB.JSON", "namespace": "", "private": "", "provides": "FB.JSON", "methods": {"sign": {"return": {"type": "", "description": "String"}, "params": [{"type": "Object", "name": "parameters", "description": "\n The parameters to use in the signature"}, {"type": "String", "name": "secret", "description": "\n Secret to use to sign the parameters"}], "description": "Generate the signature that Facebook expects from the parameters\n by appending them all in a string with your application secret,\n and taking the MD5 of that.", "guessedname": "sign", "guessedtype": "function"}}, "file": "json.js", "shortname": "FB.JSON", "description": "JSON functions"}, "FB.XFBML.Element": {"name": "FB.XFBML.Element", "namespace": "", "provides": "FB.XFBML.Element", "file": "element.js", "shortname": "FB.XFBML.Element", "methods": {"getAttribute": {"return": {"type": "", "description": "Object"}, "params": [{"type": "String", "name": "name", "description": "\n Name of the attribute"}, {"type": "Object", "name": "defaultValue", "description": "\n Default value for the\n attribute, if it isn't set."}], "description": "Get the value of an attribute associated with this tag.", "guessedname": "getAttribute", "guessedtype": "function"}, "isValid": {"description": "Check if this node is still valid and in the document.", "guessedname": "isValid", "guessedtype": "function"}}}}, "version": "1.0.0", "modules": {"FB.Api": {"name": "FB.Api", "submodules": [], "classlist": ["FB.Api"], "filelist": ["api.js", "app.js"], "subdata": {}, "fullPath": "api.js", "requires": "FB.App FB.Base FB.Md5 FB.Util FB.Uri FB.Dom"}, "FB.XFBML.ProfilePic": {"name": "FB.XFBML.ProfilePic", "submodules": [], "classlist": ["FB.XFBML.ProfilePic"], "filelist": ["dialog.js"], "subdata": {}, "fullPath": "tags/profilepic.js", "requires": "FB.Type FB.XFBML FB.Event FB.Util FB.Dom FB.XFBML.Element FB.Data"}, "FB.App": {"name": "FB.App", "submodules": [], "classlist": ["FB.App"], "filelist": ["xfbml.js"], "subdata": {}, "fullPath": "app.js", "requires": "FB.Base FB.Event FB.XdComm FB.UI.PopupWin, FB.UI.Dialog FB.Dom"}, "FB.XFBML.Element": {"name": "FB.XFBML.Element", "submodules": [], "classlist": ["FB.XFBML.Element"], "filelist": ["profilepic.js"], "subdata": {}, "fullPath": "tags/element.js", "requires": "FB.Type"}, "FB.UI.PopupWin": {"name": "FB.UI.PopupWin", "submodules": [], "classlist": ["FB.UI.PopupWin"], "filelist": ["xdcomm.js"], "subdata": {}, "fullPath": "ui/popupdlg.js", "requires": "FB.Type FB.Util FB.Event FB.XdComm FB.Dom"}, "foo": {"name": "foo", "submodules": [], "classlist": ["FB.IframeResizer"], "filelist": [], "subdata": {}, "fullPath": "test/foo.js"}, "FB.Data": {"name": "FB.Data", "submodules": [], "classlist": [], "filelist": ["async.js"], "subdata": {}, "fullPath": "data/data.js", "requires": "FB.Base FB.Type FB.Util FB.Event FB.Api FB.Async FB.App"}, "FB.IframeResizer": {"name": "FB.IframeResizer", "submodules": [], "classlist": ["FB.IframeResizer"], "filelist": ["popupdlg.js"], "subdata": {}, "fullPath": "ui/iframeresizer.js", "requires": "FB.Base FB.XdComm"}, "FB.Async": {"name": "FB.Async", "submodules": [], "classlist": [], "filelist": ["element.js"], "subdata": {}, "fullPath": "data/async.js", "requires": "FB.Base FB.Type FB.Util FB.Event"}, "FB.Dom": {"name": "FB.Dom", "submodules": [], "classlist": ["FB.Dom"], "filelist": ["json.js"], "subdata": {}, "fullPath": "common/dom.js", "requires": "FB.Base"}, "FB.Base": {"name": "FB.Base", "submodules": [], "classlist": [], "filelist": ["event.js"], "subdata": {}, "fullPath": "core/base.js"}, "FB.JSON": {"name": "FB.JSON", "submodules": [], "classlist": ["FB.JSON"], "filelist": ["md5.js"], "subdata": {}, "fullPath": "common/json.js", "requires": "FB.Base"}, "FB.Util": {"name": "FB.Util", "submodules": [], "classlist": ["FB.Util"], "filelist": ["base.js"], "subdata": {}, "fullPath": "common/util.js", "requires": "FB.Base"}, "FB.Loader": {"name": "FB.Loader", "submodules": [], "classlist": [""], "filelist": ["type.js"], "subdata": {}, "fullPath": "core/loader.js", "requires": "FB.Base"}, "FB.Md5": {"name": "FB.Md5", "submodules": [], "classlist": [], "filelist": ["uri.js"], "subdata": {}, "fullPath": "common/md5.js", "requires": "FB.Base FB.Util"}, "FB.Loader.use": {"name": "FB.Loader.use", "submodules": [], "classlist": [], "filelist": ["debug.js"], "subdata": {}, "fullPath": "core/use.js", "requires": "FB.Loader FB.Util FB.Dom FB.Base"}, "FB.Debug": {"name": "FB.Debug", "submodules": [], "classlist": [], "filelist": ["data.js"], "subdata": {}, "fullPath": "core/debug.js", "requires": "FB.Base"}, "FB.Flash": {"name": "FB.Flash", "submodules": [], "classlist": [], "filelist": ["foo.js"], "subdata": {}, "fullPath": "xdcomm/flash.js", "requires": "FB.Base FB.Event FB.Dom"}, "FB.Event": {"name": "FB.Event", "submodules": [], "classlist": ["FB.Event", "FB.Delegate"], "filelist": ["loader.js"], "subdata": {}, "fullPath": "core/event.js", "requires": "FB.Type FB.Base"}, "FB.XdComm": {"name": "FB.XdComm", "submodules": [], "classlist": ["FB.XdComm"], "filelist": ["flash.js"], "subdata": {}, "fullPath": "xdcomm/xdcomm.js", "requires": "FB.Base  FB.Util\n           FB.Uri  FB.JSON FB.Event FB.Flash"}, "FB.XFBML": {"name": "FB.XFBML", "submodules": [], "classlist": ["FB.XFBML"], "filelist": ["dom.js"], "subdata": {}, "fullPath": "xfbml.js", "requires": "FB.Base FB.Loader.use FB.Loader"}, "FB.UI.Dialog": {"name": "FB.UI.Dialog", "submodules": [], "classlist": ["FB.UI.Dialog"], "filelist": ["iframeresizer.js"], "subdata": {}, "fullPath": "ui/dialog.js", "requires": "FB.Type FB.Base FB.XdComm FB.Util FB.Dom FB.Event FB.IframeResizer"}, "FB.Uri": {"name": "FB.Uri", "submodules": [], "classlist": ["FB.Uri"], "filelist": ["util.js"], "subdata": {}, "fullPath": "common/uri.js", "requires": "FB.Base"}, "FB.Type": {"name": "FB.Type", "submodules": [], "classlist": [], "filelist": ["use.js"], "subdata": {}, "fullPath": "core/type.js", "requires": "FB.Base"}}, "filemap": {"element.js": {"classlist": ["FB.XFBML.Element"], "name": "element.js", "provides": "FB.Async"}, "use.js": {"classlist": [], "name": "use.js", "provides": "FB.Type"}, "debug.js": {"classlist": [], "name": "debug.js", "provides": "FB.Loader.use"}, "type.js": {"classlist": [], "name": "type.js", "provides": "FB.Loader"}, "foo.js": {"classlist": ["FB.IframeResizer"], "name": "foo.js", "provides": "FB.Flash"}, "json.js": {"classlist": ["FB.JSON"], "name": "json.js", "provides": "FB.Dom"}, "util.js": {"classlist": ["FB.Util"], "name": "util.js", "provides": "FB.Uri"}, "uri.js": {"classlist": ["FB.Uri"], "name": "uri.js", "provides": "FB.Md5"}, "dom.js": {"classlist": ["FB.Dom"], "name": "dom.js", "provides": "FB.XFBML"}, "md5.js": {"classlist": [], "name": "md5.js", "provides": "FB.JSON"}, "data.js": {"classlist": [], "name": "data.js", "provides": "FB.Debug"}, "dialog.js": {"classlist": ["FB.UI.Dialog"], "name": "dialog.js", "provides": "FB.XFBML.ProfilePic"}, "iframeresizer.js": {"classlist": ["FB.IframeResizer"], "name": "iframeresizer.js", "provides": "FB.UI.Dialog"}, "xfbml.js": {"classlist": ["FB.XFBML"], "name": "xfbml.js", "provides": "FB.App"}, "async.js": {"classlist": [], "name": "async.js", "provides": "FB.Data"}, "loader.js": {"classlist": [""], "name": "loader.js", "provides": "FB.Event"}, "api.js": {"classlist": ["FB.Api"], "name": "api.js", "provides": "FB.Api"}, "profilepic.js": {"classlist": ["FB.XFBML.ProfilePic"], "name": "profilepic.js", "provides": "FB.XFBML.Element"}, "app.js": {"classlist": ["FB.App"], "name": "app.js", "provides": "FB.Api"}, "popupdlg.js": {"classlist": ["FB.UI.PopupWin"], "name": "popupdlg.js", "provides": "FB.IframeResizer"}, "event.js": {"classlist": ["FB.Event", "FB.Delegate"], "name": "event.js", "provides": "FB.Base"}, "base.js": {"classlist": [], "name": "base.js", "provides": "FB.Util"}, "flash.js": {"classlist": [], "name": "flash.js", "provides": "FB.XdComm"}, "xdcomm.js": {"classlist": ["FB.XdComm"], "name": "xdcomm.js", "provides": "FB.UI.PopupWin"}}}