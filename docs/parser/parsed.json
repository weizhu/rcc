{"majorversion": 2, "classmap": {"": {"name": "", "namespace": "", "module": "Basic", "methods": {"_mergeIndexQuery": {"static": "", "description": "Check if y can be merged into x", "guessedname": "_mergeIndexQuery", "guessedtype": "function"}, "_check": {"static": "", "return": {"type": "", "description": "true if it is done"}, "description": "Check if a comp if fullfilled", "guessedname": "_check", "guessedtype": "function"}, "_selectByIndex": {"static": "", "description": "Alternate method from query, this method is more specific\n but more efficient. We use it internally", "guessedname": "_selectByIndex", "guessedtype": "function"}, "onScriptLoaded": {"static": "", "description": "This function will be invoked at end of each connect.php load", "guessedname": "onScriptLoaded", "guessedtype": "function"}, "subclass": {"static": "", "params": [{"type": "string", "name": "name", "description": " class name"}, {"type": "string", "name": "baseName,", "description": ""}, {"type": "function", "name": "constructor", "description": " class constructor"}, {"type": "object", "name": "proto", "description": " instance methods for class"}], "description": "Create a subclass\n Note: To call base class constructor, use this._base(...).\n If you override a method 'foo' but still want to call\n the base class's method 'foo', use this._callBase('foo', ...)", "guessedname": "subclass", "guessedtype": "function"}, "query": {"return": {"type": "FB.Data.Query", "description": "An async query object that contains query result"}, "description": "Perform a FQL query", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string} FQL query string template. It can contains optional\n                 formated parameters in forms '{0}', '{1", "name": "'.", "description": " When these\n                 parameters are used in the string, the actual data should\n                 be passed as parameter following the template parameter."}]}, "Class": {"static": "", "params": [{"type": "string", "name": "name", "description": " class name"}, {"type": "function", "name": "constructor", "description": " class constructor"}, {"type": "object", "name": "proto", "description": " instance methods for class"}], "description": "Create a new class.\n Note: I have to use 'Class' instead of 'class' because 'class' is\n a reserved (but unused) keyword.", "guessedname": "Class", "guessedtype": "function"}}, "private": "", "file": "loader.js", "shortname": "", "description": "This base loader that does housekeeping of loaded components and support\n automatic loading of required css for a a component."}, "FB.XFBML.LoginButton": {"name": "FB.XFBML.LoginButton", "namespace": "", "module": "XFBML", "extends": "FB.XFBML.Element", "superclass": "FB.XFBML.Element", "file": "loginbutton.js", "shortname": "FB.XFBML.LoginButton", "description": "Implementation for fb:login-button tag.\n Note this implementation does not suppport the following features\n in Connect V1:\n 1. i18n support\n 2. logout button\n 3. 'onlogin' and 'onlogout' attributes\n 3. Validation of allowed values on attributes"}, "FB.XFBML.Name": {"name": "FB.XFBML.Name", "namespace": "", "module": "XFBML", "extends": "FB.XFBML.Element", "superclass": "FB.XFBML.Element", "file": "name.js", "shortname": "FB.XFBML.Name", "methods": {"getProfileLink": {"return": {"type": "", "description": "String"}, "description": "link to the explicit href or profile.php", "static": "", "guessedname": "getProfileLink", "guessedtype": "function", "params": [{"type": "FB.UserInfo", "name": "userInfo", "description": ""}, {"type": "String", "name": "html", "description": ""}, {"type": "String", "name": "href", "description": ""}]}, "_renderOther": {"description": "Handle rendering of the element, using the\n metadata that came with it.", "guessedname": "_renderOther", "guessedtype": "function"}, "upperCaseFirstChar": {"return": {"type": "", "description": "String"}, "static": "", "params": [{"type": "String", "name": "s", "description": ""}], "guessedname": "upperCaseFirstChar", "guessedtype": "function"}, "_renderPronoun": {"description": "Given this name, figure out the proper (English) pronoun for it.", "guessedname": "_renderPronoun", "guessedtype": "function"}, "isUser": {"static": "", "params": [{"type": "uid", "name": "id", "description": ""}], "description": "Check if an id is an user id, instead of a page id\n [NOTE:] This code is based on is_user_id function in our server code.\n If that function changes, we'd have to update this one as well.", "guessedname": "isUser", "guessedtype": "function"}}}, "FB.UI.PopupWin": {"name": "FB.UI.PopupWin", "namespace": "", "module": "Basic", "file": "popupdlg.js", "shortname": "FB.UI.PopupWin", "methods": {"close": {"description": "Close this popup window", "guessedname": "close", "guessedtype": "function"}}}, "FB.XFBML": {"name": "FB.XFBML", "namespace": "", "module": "XFBML", "methods": {"parse": {"static": "", "params": [], "description": "Parse and render XFBML markup inside a DOM element", "guessedname": "parse", "guessedtype": "function"}, "_processElement": {"guessedname": "_processElement", "static": "", "description": "Process an XFBML element", "private": "", "guessedtype": "function"}, "set": {"static": "", "params": [{"type": "DOMElement", "name": "dom", "description": "  DOM element"}, {"type": "string", "name": "markup", "description": " XFBML markup. It may contain reguarl HTML markup as well."}], "description": "Set XFBML markup on a given DOM node. This is like\n setInnerHTML\n Example: FB.XFBML.set($('container', '<fb:name uid=\"4\"></fb:name><div>.....')", "guessedname": "set", "guessedtype": "function"}, "_getDoms": {"return": {"type": "", "description": "DOMElementCollection"}, "private": "", "static": "", "guessedname": "_getDoms", "guessedtype": "function", "params": [{"type": "Object", "name": "element", "description": ""}, {"type": "String", "name": "xmlns", "description": ""}, {"type": "String", "name": "localName", "description": ""}]}, "registerTag": {"static": "", "params": [{"type": "object", "name": "An", "description": " array of the format ['<xmls-namespace>', '<tag-name>',\n       '<name of the JS class that implements the tag>']"}], "description": "Register a custom XFBML Tag\n Example: FB.XFBML.registerTag('digg', 'digg-button', 'Digg.DiggButton'])", "guessedname": "registerTag", "guessedtype": "function"}}, "file": "xfbml.js", "shortname": "FB.XFBML", "description": "This provides public APIs for developer to programming XFBML"}, "FB.XFBML.Element": {"name": "FB.XFBML.Element", "namespace": "", "module": "XFBML", "methods": {"getAttribute": {"return": {"type": "", "description": "Object"}, "params": [{"type": "String", "name": "name", "description": "\n Name of the attribute"}, {"type": "Object", "name": "defaultValue", "description": "\n Default value for the\n attribute, if it isn't set."}], "description": "Get the value of an attribute associated with this tag.", "guessedname": "getAttribute", "guessedtype": "function"}, "isValid": {"description": "Check if this node is still valid and in the document.", "guessedname": "isValid", "guessedtype": "function"}}, "file": "element.js", "shortname": "FB.XFBML.Element", "description": "Base class for all XFBML element\n Note: we removed support for condition attribute that was in V1."}, "FB.IframeResizer": {"name": "FB.IframeResizer", "namespace": "", "module": "Basic", "file": "iframeresizer.js", "shortname": "FB.IframeResizer", "description": "This class enable service to allow iframe to request size changes"}, "FB.Api": {"name": "FB.Api", "namespace": "", "module": "Basic", "methods": {"_invokeUi": {"description": "Calls the specified Facebook UI method with given parameters", "private": "", "static": "", "guessedname": "_invokeUi", "guessedtype": "function", "params": [{"type": "String", "name": "method", "description": "\n API method to call"}, {"type": "Object", "name": "parameters", "description": "\n parameters corresponding to the method"}, {"type": "function", "name": "callback", "description": " callback function. The API result will passed to\n          callback function when result is read."}, {"type": "object", "name": "options", "description": " [Optional]"}]}, "_invokeRest": {"description": "Make a REST Api call", "private": "", "static": "", "guessedname": "_invokeRest", "guessedtype": "function", "params": [{"type": "String", "name": "method", "description": "\n API method to call"}, {"type": "Object", "name": "parameters", "description": "\n parameters corresponding to the method"}, {"type": "", "name": "callback", "description": ""}, {"type": "", "name": "options", "description": "\n optional options"}]}, "invoke": {"static": "", "params": [{"type": "String", "name": "method", "description": "\n API method to call"}, {"type": "Object", "name": "parameters", "description": "\n parameters corresponding to the method"}, {"type": "", "name": "callback", "description": ""}, {"type": "", "name": "options", "description": "\n optional options"}], "description": "Calls the specified Facebook API method with given parameters, or\n queues it on the Sequencer.", "guessedname": "invoke", "guessedtype": "function"}}, "file": "api.js", "shortname": "FB.Api", "properties": {"_callId": {"type": "Number", "static": "", "guessedname": "_callId", "guessedtype": "property"}}, "description": "This module provides unified API access (both REST and UI)"}, "FB.Util": {"name": "FB.Util", "namespace": "", "module": "Basic", "file": "util.js", "shortname": "FB.Util", "properties": {"FB": {"description": "Provide a lowest level base functions for Connect JS. We should only place\n commonly used generally purpose methods in this namespace\n Every methods in this file are in FB namespace.", "guessedname": "FB", "guessedtype": "property"}}, "methods": {"getFacebookUrl": {"return": {"type": "", "description": "String"}, "description": "Gets a reference to the statically stored base Facebook URL, and adjusts for the desired subdomain.", "static": "", "guessedname": "getFacebookUrl", "guessedtype": "function", "params": [{"type": "String", "name": "subDomain", "description": "\n Subdomain of Facebook to use"}]}, "format": {"static": "", "description": "Format a string\n Example:FB.Util.format('{0}.facebook.com/{1}', 'www', 'login.php') returns\n 'www.facebook.com/login.php'", "guessedname": "format", "guessedtype": "function"}, "provide": {"description": "Provide a module or static class methods with fully qualified namespace. The name\n is a dot separated string. The feature is an object from which\n properties are _copied_ into the target.\n Example:\n FB.provide('Server.Auth', {\n   init: function() {\n     // ...\n   }\n });\n    *", "access": "protected", "static": "", "guessedname": "provide", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": "      a dot separated string naming the feature"}, {"type": "Object", "name": "feature", "description": "   the feature being provided"}, {"type": "Boolean", "name": "append", "description": "   indicate if an existing object should be\n                          appended defaults to false. this need to be\n                          explicit to detect inadvertent redefinition of\n                          features."}]}, "bind": {"description": "Bind a function to a given context and arguments.", "access": "protected", "returns": "{Function}   the bound function", "static": "", "guessedname": "bind", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "         the function to bind"}, {"type": "Object", "name": "context", "description": "      object to be used as the context when\n                             calling the function"}]}, "create": {"return": {"type": "", "description": "object  The created object, or boolean if testOnly is true."}, "description": "Create a namespaced object\n This create an fullly namespaced name.\n Examples:\n FB.create('XFBML.ProfilePic') = function() {...}\n   create FB.XFBML.ProfilePic and assign the value of the function. If FB.XFBML does not exist, this call\n   would automatically create it.\n FB.create('Util');\n   create a namespace FB.Util if it doesn't already exist;\n FB.create('Util.foo', null, true)\n   Check if FB.Util.foo exists", "access": "private", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "string", "name": "name", "description": " full qualified name ('Util.foo', etc.)"}, {"type": "bool", "name": "testOnly", "description": "  [optional] This is an optional parameter. If set to true, then the function\n                  will"}]}, "obj2array": {"static": "", "description": "Create an array from the keys in an object\n Example: obj2array({'x': 2, 'y': 3'}) returns ['x', 'y']", "guessedname": "obj2array", "guessedtype": "function"}, "createUnique": {"static": "", "description": "Create an unique id string", "guessedname": "createUnique", "guessedtype": "function"}, "copy": {"access": "protected", "params": [{"type": "Object", "name": "target", "description": "      the target object where things will be copied\n                            into"}, {"type": "Object", "name": "source", "description": "      the source object where things will be copied\n                            from"}, {"type": "Boolean", "name": "overwrite", "description": "  indicate if existing items should be\n                            overwritten"}, {"type": "function", "name": "tranform", "description": "   [Optional], transformation function for each item"}], "description": "Copies things from source into target.", "guessedname": "copy", "guessedtype": "function"}, "forEach": {"static": "", "params": [{"type": "", "name": "item", "description": "   Variant   an Array or an Object"}, {"type": "", "name": "fn", "description": "     Function  the callback function for iteration"}, {"type": "", "name": "proto", "description": "  Boolean   indicate if properties from the prototype should\n                         be included"}], "description": "For looping through Arrays and Objects.", "guessedname": "forEach", "guessedtype": "function"}}}, "FB.UI.Dialog": {"name": "FB.UI.Dialog", "namespace": "", "module": "Basic", "methods": {"getContainer": {"static": "", "return": {"type": "", "description": "Object"}, "description": "_popupContainer", "guessedname": "getContainer", "guessedtype": "function"}}, "file": "dialog.js", "shortname": "FB.UI.Dialog", "description": "An iframe dialog"}, "FB.XFBML.ProfilePic": {"name": "FB.XFBML.ProfilePic", "namespace": "", "module": "XFBML", "extends": "FB.XFBML.Element", "superclass": "FB.XFBML.Element", "file": "profilepic.js", "shortname": "FB.XFBML.ProfilePic"}, "FB.Async.Data": {"name": "FB.Async.Data", "constructors": [{"params": [{"type": "object", "name": "[Optional]", "description": " value of the data, if available."}], "description": "constructor of FB.Async.Data"}], "namespace": "", "module": "Data", "file": "async.js", "shortname": "FB.Async.Data", "description": "An node that holds data that may not be available immediately"}, "FB.Uri": {"name": "FB.Uri", "namespace": "", "module": "Basic", "methods": {"createQueryString": {"return": {"type": "", "description": "String"}, "description": "Given a dictionary mapping name to param\n returns a query string with encoded values.", "static": "", "guessedname": "createQueryString", "guessedtype": "function", "params": [{"type": "Object", "name": "q_params", "description": "\n the dictionary"}, {"type": "function", "name": "optional", "description": " encoder for values"}]}, "getQueryParameters": {"description": "Decode a query string into a parameters object.", "access": "private", "returns": "{Object} the parameters to encode", "static": "", "guessedname": "getQueryParameters", "guessedtype": "function", "params": [{"type": "String", "name": "str", "description": "  the query string"}]}}, "private": "", "file": "uri.js", "shortname": "FB.Uri", "description": "Uri related functions\n Note: I am creating a separate Uri component instead of putting it into\n FB.Util because I expect that we will add more Uri related methods back\n over time."}, "FB.XdComm": {"name": "FB.XdComm", "constructors": [{"params": [{"type": "String", "name": "rpcServerName", "description": "\n Name of the server"}, {"type": "Object", "name": "registeredMethodMap", "description": "\n Methods to register as \"legal\" to be\n called from this server"}], "description": "Register an RPC service. This allow us backward compatibility that would make migration from v1\n smoother since we will have to support both for some time."}], "namespace": "", "module": "Basic", "methods": {"decode": {"return": {"type": "", "description": "String"}, "description": "Custom decoding to workaround bug in flash's ExternInterface\n Code is from Dojo's library", "static": "", "guessedname": "decode", "guessedtype": "function", "params": [{"type": "String", "name": "data", "description": ""}]}, "onReceiverLoaded": {"static": "", "params": [{"type": "String", "name": "hash", "description": ""}], "description": "This method should be called by XdCommReceiver.js only!", "guessedname": "onReceiverLoaded", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "String", "name": "Optional", "description": " xd receiver url"}], "description": "Initialize XdComm", "guessedname": "init", "guessedtype": "function"}, "getUdp": {"return": {"type": "", "description": "String"}, "description": "Create an url that can be used to send a UDP like single message to\n the specified end point when this url is opened.", "static": "", "guessedname": "getUdp", "guessedtype": "function", "params": [{"type": "function", "name": "callback", "description": ""}, {"type": "Object", "name": "data", "description": "\n data to send."}, {"type": "FB.XdComm.EndPoint", "name": "endPoint", "description": "\n target to send message to"}, {"type": "FB.XdComm.PacketDataFormat", "name": "dataFormat", "description": "\n format of data attached to string, default JSON"}]}}, "private": "", "file": "xdcomm.js", "shortname": "FB.XdComm", "properties": {"receiverUrl": {"type": "String", "static": "", "guessedname": "receiverUrl", "guessedtype": "property"}, "_id": {"type": "String", "static": "", "guessedname": "_id", "guessedtype": "property"}}, "description": "Server for cross domain communication"}, "FB.Dom": {"name": "FB.Dom", "namespace": "", "module": "Basic", "methods": {"getWindowSize": {"static": "", "return": {"type": "", "description": "FB.Size"}, "description": "Get browser window size\n windowSize", "guessedname": "getWindowSize", "guessedtype": "function"}, "addCss": {"static": "", "params": [{"type": "Object", "name": "dom", "description": ""}, {"type": "String", "name": "newClass", "description": ""}], "guessedname": "addCss", "guessedtype": "function"}, "createHiddenIFrame": {"static": "", "description": "Create a hidden iframe", "guessedname": "createHiddenIFrame", "guessedtype": "function"}, "createId": {"static": "", "return": {"type": "string", "description": "an unique DOM id"}, "description": "Create an unique DOM id", "guessedname": "createId", "guessedtype": "function"}, "removeDom": {"static": "", "params": [{"type": "Object", "name": "element", "description": ""}], "description": "Remove a dom element from dom tree", "guessedname": "removeDom", "guessedtype": "function"}, "addScript": {"static": "", "description": "Dynamically add a script tag", "guessedname": "addScript", "guessedtype": "function"}, "addEventListener": {"static": "", "params": [{"type": "Object", "name": "element", "description": ""}, {"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "handler", "description": "\n handler should be a function with no parameters."}], "description": "Cross browser way to add event listener to a DOM element, window or document object.", "guessedname": "addEventListener", "guessedtype": "function"}, "getWindowLocation": {"static": "", "return": {"type": "", "description": "FB.Point"}, "description": "Get location of the browser window relative to computer screen\n windowLocation", "guessedname": "getWindowLocation", "guessedtype": "function"}, "getBrowserType": {"static": "", "return": {"type": "", "description": "string 'ie' | 'mozilla' |'safari' | 'other'"}, "description": "Get browser type", "guessedname": "getBrowserType", "guessedtype": "function"}, "removeCss": {"static": "", "params": [{"type": "Object", "name": "dom", "description": ""}, {"type": "String", "name": "className", "description": ""}], "guessedname": "removeCss", "guessedtype": "function"}, "containsCss": {"return": {"type": "", "description": "Boolean"}, "static": "", "params": [{"type": "Object", "name": "dom", "description": ""}, {"type": "String", "name": "className", "description": ""}], "guessedname": "containsCss", "guessedtype": "function"}}, "private": "", "file": "dom.js", "shortname": "FB.Dom", "description": "This provides helper methods related to DOM"}, "FB.App": {"name": "FB.App", "namespace": "", "module": "Basic", "methods": {"monitor": {"static": "", "params": [{"type": "string", "name": "name", "description": " Name of event. possible values are 'session', 'status', 'init'"}, {"type": "function", "name": "callback", "description": " A callback function. arguments may be passed to the callback.\n     If the callback function returns true, the event will be unsubscribed."}, {"type": "bool", "name": "no_sync_callback", "description": " By default, the callback will be invoked immediately before\n    the event is fired, unless this parameter specified a true value"}, {"type": "bool", "name": "auto_unsubscribe", "description": " By default, the callback will be invoked whenever the event fires.\n      However, if this parameter value is true, the callback will be unsubscribed from the event after\n      it is fired once."}], "description": "Watch for changes in FB.App.", "guessedname": "monitor", "guessedtype": "function"}, "_checkStatus": {"guessedname": "_checkStatus", "static": "", "description": "This function create an hidden iframe to login_status.lphp", "private": "", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "String", "name": "apiKey", "description": "\n API key for your Facebook application"}, {"type": "Object", "name": "settings", "description": "\n An optional dictionary of other application settings.\n Currently supported key/value are:"}], "description": "initialize an Facebook app. xdChannelUrl parameter may not be needed if stats shows postMessage and flash XdComm have enough coverage", "guessedname": "init", "guessedtype": "function"}, "logout": {"static": "", "params": [{"type": "function", "name": "callback", "description": " This function will be called when operation is completed"}], "description": "Log out of current session and facebook if current session.\n Note this method is a separate component because logout method\n is not always needed.", "guessedname": "logout", "guessedtype": "function"}, "connect": {"static": "", "params": [{"type": "function", "name": "callback", "description": " Callback to be invoked after connect result is known"}, {"type": "object", "name": "options", "description": ""}], "description": "Add connect method to FB.App\n This method is in a separate component because App's don't always\n need to call connect method.", "guessedname": "connect", "guessedtype": "function"}, "_onStatus": {"guessedname": "_onStatus", "static": "", "description": "callback handler when status string returned from somewhere (login_status,\n login.php, etc.) Our existing wire prototype is not clean (not JSON\n encoded), so we basically do some simple parsing for now.", "private": "", "guessedtype": "function"}}, "file": "app.js", "shortname": "FB.App", "properties": {"status": {"type": "string", "static": "", "description": "current connect status. Note we use undefined\n to signal that we don't know yet", "guessedname": "status", "guessedtype": "property"}, "session": {"type": "object", "static": "", "description": "current session.\n When session exists, it is standard session structure that contains session_key,\n uid, session_secret, expire_time\n Note we use undefined\n to signal that we don't know yet", "guessedname": "session", "guessedtype": "property"}, "settings": {"type": "object", "static": "", "description": "A dictionary of advanced facebook settings.\n Currently supported key/value are:", "guessedname": "settings", "guessedtype": "property"}}, "description": "This module provides application settings, states (session states, permissions, etc.) and auth related\n methods (connect, logout)"}, "FB.Delegate": {"name": "FB.Delegate", "namespace": "", "private": "", "module": "Basic", "file": "event.js", "shortname": "FB.Delegate"}, "FB.Event": {"name": "FB.Event", "namespace": "", "module": "Basic", "methods": {"fire": {"static": "", "params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event"}, {"type": "object", "name": "args0,", "description": " .., argN arguments to be passed to callback\n functions\n   that subscribed to the event"}], "description": "Fire an event on the given object", "guessedname": "fire", "guessedtype": "function"}, "add": {"static": "", "params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event"}, {"type": "function", "name": "callback", "description": " A callback function.\n arguments may be passed to the callback. If the callback function\n returns true, the event will be subscribed."}], "description": "Subscribe to an event on the given object\n Example:\n FB.Event.add(FB.App, 'session', function(session) {\n   if (session) {\n     // Yeah!. User is connected\n     ...\n     return true; // I don't need to listen anymore\n   }\n   // Hmm. no session. Keep listening\n }", "guessedname": "add", "guessedtype": "function"}, "monitor": {"static": "", "params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event."}, {"type": "function", "name": "callback", "description": " A callback function. arguments may be passed to the callback.\n     If the callback function returns true, the event will be unsubscribed."}, {"type": "bool", "name": "no_sync_callback", "description": " By default, the callback will be invoked immediately before\n    the event is fired, unless this parameter specified a true value"}, {"type": "bool", "name": "auto_unsubscribe", "description": " By default, the callback will be invoked whenever the event fires.\n      However, if this parameter value is true, the callback will be unsubscribed from the event after\n      it is fired once."}], "description": "Watch for changes", "guessedname": "monitor", "guessedtype": "function"}, "remove": {"static": "", "params": [{"type": "object", "name": "obj", "description": " object that exposes the named event"}, {"type": "string", "name": "name", "description": " Name of event"}, {"type": "function", "name": "callback", "description": " previous callback function passed to\n        FB.Event.add"}], "description": "Unsubscribe to an event on the given object. Note you can also unsubscribe an event\n by simply return true in the callback function provided to FB.Event.subscribe.\n Example:\n FB.Event.add(FB.App, 'connectState', mycallback);\n ...\n // Dont' need to subscribe to the event anymore\n FB.Event.remove(FB.App, 'connectState', mycallback);", "guessedname": "remove", "guessedtype": "function"}}, "private": "", "file": "event.js", "shortname": "FB.Event", "description": "Basic Event system"}, "FB.JSON": {"name": "FB.JSON", "namespace": "", "module": "Basic", "methods": {"sign": {"return": {"type": "", "description": "String"}, "description": "Generate the signature that Facebook expects from the parameters\n by appending them all in a string with your application secret,\n and taking the MD5 of that.", "static": "", "guessedname": "sign", "guessedtype": "function", "params": [{"type": "Object", "name": "parameters", "description": "\n The parameters to use in the signature"}, {"type": "String", "name": "secret", "description": "\n Secret to use to sign the parameters"}]}}, "private": "", "file": "json.js", "shortname": "FB.JSON", "description": "JSON functions"}, "FB.XFBML.ShareButton": {"name": "FB.XFBML.ShareButton", "namespace": "", "module": "XFBML", "extends": "FB.XFBML.Element", "superclass": "FB.XFBML.Element", "file": "sharebutton.js", "shortname": "FB.XFBML.ShareButton", "description": "Implementation for fb:share-button tag."}, "FB.Async": {"name": "FB.Async", "namespace": "", "module": "Data", "methods": {"eval": {"static": "", "params": [{"type": "string | function", "name": "a", "description": " string or a function will be evaluated when all data are ready"}], "data": "a list of objects that needs to be evaluted when they are ready", "guessedname": "eval", "guessedtype": "function"}, "wait": {"static": "", "description": "Given a list of potential async data,\n wait until they are all ready", "guessedname": "wait", "guessedtype": "function"}}, "file": "async.js", "shortname": "FB.Async", "description": "Async operations"}}, "version": "1.0.0", "modules": {"Data": {"name": "Data", "submodules": [], "classlist": ["FB.Async", "FB.Async.Data"], "filelist": ["async.js", "element.js"], "subdata": {}, "provides": "FB.Data", "fullPath": "data/async.js", "requires": "FB.Base FB.Type FB.Util FB.Event FB.Api FB.Async FB.App"}, "XFBML": {"name": "XFBML", "submodules": [], "classlist": ["FB.XFBML", "FB.XFBML.Element", "FB.XFBML.ProfilePic", "FB.XFBML.Name", "FB.XFBML.ShareButton", "FB.XFBML.LoginButton"], "option": "preserve-image-urls", "filelist": ["dom.js", "profilepic.js", "name.js", "helper.js", "sharebutton.js", "loginbutton.js", "dialog.js", "button_css.js"], "subdata": {}, "provides": "FB.XFBML", "fullPath": "css/button_css.js", "requires": "FB.Base FB.Loader.use FB.Loader", "description": "author blaise"}, "Basic": {"name": "Basic", "submodules": [], "classlist": ["FB.Api", "FB.App", "FB.Dom", "FB.JSON", "FB.Uri", "FB.Util", "FB.Event", "FB.Delegate", "", "FB.UI.Dialog", "FB.IframeResizer", "FB.UI.PopupWin", "FB.XdComm"], "filelist": ["api.js", "app.js", "xfbml.js", "json.js", "md5.js", "uri.js", "util.js", "base.js", "event.js", "loader.js", "type.js", "use.js", "debug.js", "data.js", "iframeresizer.js", "popupdlg.js", "xdcomm.js", "flash.js", "share_button_css.js"], "subdata": {}, "provides": "FB.Api", "fullPath": "xdcomm/flash.js", "requires": "FB.App FB.Base FB.Md5 FB.Util FB.Uri FB.Dom"}}, "filemap": {"element.js": {"classlist": ["FB.XFBML.Element"], "name": "element.js", "module": "Data"}, "sharebutton.js": {"classlist": ["FB.XFBML.ShareButton"], "name": "sharebutton.js", "module": "XFBML"}, "loginbutton.js": {"classlist": ["FB.XFBML.LoginButton"], "name": "loginbutton.js", "module": "XFBML"}, "use.js": {"classlist": [], "name": "use.js", "module": "Basic"}, "debug.js": {"classlist": [], "name": "debug.js", "module": "Basic"}, "type.js": {"classlist": [], "name": "type.js", "module": "Basic"}, "json.js": {"classlist": ["FB.JSON"], "name": "json.js", "module": "Basic"}, "util.js": {"classlist": ["FB.Util"], "name": "util.js", "module": "Basic"}, "uri.js": {"classlist": ["FB.Uri"], "name": "uri.js", "module": "Basic"}, "dom.js": {"classlist": ["FB.Dom"], "name": "dom.js", "module": "XFBML"}, "button_css.js": {"classlist": [], "name": "button_css.js", "module": "XFBML"}, "md5.js": {"classlist": [], "name": "md5.js", "module": "Basic"}, "data.js": {"classlist": [], "name": "data.js", "module": "Basic"}, "share_button_css.js": {"classlist": [], "name": "share_button_css.js", "module": "Basic"}, "dialog.js": {"classlist": ["FB.UI.Dialog"], "name": "dialog.js", "module": "XFBML"}, "iframeresizer.js": {"classlist": ["FB.IframeResizer"], "name": "iframeresizer.js", "module": "Basic"}, "name.js": {"classlist": ["FB.XFBML.Name"], "name": "name.js", "module": "XFBML"}, "xfbml.js": {"classlist": ["FB.XFBML"], "name": "xfbml.js", "module": "Basic"}, "async.js": {"classlist": ["FB.Async", "FB.Async.Data"], "name": "async.js", "module": "Data"}, "helper.js": {"classlist": [], "name": "helper.js", "module": "XFBML"}, "loader.js": {"classlist": [""], "name": "loader.js", "module": "Basic"}, "api.js": {"classlist": ["FB.Api"], "name": "api.js", "module": "Basic"}, "profilepic.js": {"classlist": ["FB.XFBML.ProfilePic"], "name": "profilepic.js", "module": "XFBML"}, "app.js": {"classlist": ["FB.App"], "name": "app.js", "module": "Basic"}, "popupdlg.js": {"classlist": ["FB.UI.PopupWin"], "name": "popupdlg.js", "module": "Basic"}, "event.js": {"classlist": ["FB.Event", "FB.Delegate"], "name": "event.js", "module": "Basic"}, "base.js": {"classlist": [], "name": "base.js", "module": "Basic"}, "flash.js": {"classlist": [], "name": "flash.js", "module": "Basic"}, "xdcomm.js": {"classlist": ["FB.XdComm"], "name": "xdcomm.js", "module": "Basic"}}}