{
    "majorversion": 2, 
    "classmap": {
        "FB.XFBML.LoginButton": {
            "name": "FB.XFBML.LoginButton", 
            "namespace": "", 
            "provides": "FB.XFBML.LoginButton", 
            "extends": "FB.XFBML.Element", 
            "superclass": "FB.XFBML.Element", 
            "file": "helper.js", 
            "shortname": "FB.XFBML.LoginButton", 
            "description": "Implementation for fb:login-button tag.\n Note this implementation does not suppport the following features\n in Connect V1:\n 1. i18n support\n 2. logout button\n 3. 'onlogin' and 'onlogout' attributes\n 3. Validation of allowed values on attributes"
        }, 
        "FB.Api": {
            "methods": {
                "_invokeUi": {
                    "description": "Calls the specified Facebook UI method with given parameters", 
                    "private": "", 
                    "static": "", 
                    "guessedname": "_invokeUi", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "method", 
                            "description": "\n API method to call"
                        }, 
                        {
                            "type": "Object", 
                            "name": "parameters", 
                            "description": "\n parameters corresponding to the method"
                        }, 
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " callback function. The API result will passed to\n          callback function when result is read."
                        }, 
                        {
                            "type": "object", 
                            "name": "options", 
                            "description": " [Optional]"
                        }
                    ]
                }, 
                "_invokeRest": {
                    "description": "Make a REST Api call", 
                    "private": "", 
                    "static": "", 
                    "guessedname": "_invokeRest", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "method", 
                            "description": "\n API method to call"
                        }, 
                        {
                            "type": "Object", 
                            "name": "parameters", 
                            "description": "\n parameters corresponding to the method"
                        }, 
                        {
                            "type": "", 
                            "name": "callback", 
                            "description": ""
                        }, 
                        {
                            "type": "", 
                            "name": "options", 
                            "description": "\n optional options"
                        }
                    ]
                }, 
                "invoke": {
                    "static": "", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "method", 
                            "description": "\n API method to call"
                        }, 
                        {
                            "type": "Object", 
                            "name": "parameters", 
                            "description": "\n parameters corresponding to the method"
                        }, 
                        {
                            "type": "", 
                            "name": "callback", 
                            "description": ""
                        }, 
                        {
                            "type": "", 
                            "name": "options", 
                            "description": "\n optional options"
                        }
                    ], 
                    "description": "Calls the specified Facebook API method with given parameters, or\n queues it on the Sequencer.", 
                    "guessedname": "invoke", 
                    "guessedtype": "function"
                }
            }, 
            "description": "This module provides unified API access (both REST and UI)", 
            "namespace": "", 
            "provides": "FB.Api", 
            "shortname": "FB.Api", 
            "properties": {
                "_callId": {
                    "type": "Number", 
                    "static": "", 
                    "guessedname": "_callId", 
                    "guessedtype": "property"
                }
            }, 
            "name": "FB.Api"
        }, 
        "FB.XFBML.ProfilePic": {
            "name": "FB.XFBML.ProfilePic", 
            "namespace": "", 
            "provides": "FB.XFBML.ProfilePic", 
            "extends": "FB.XFBML.Element", 
            "superclass": "FB.XFBML.Element", 
            "file": "element.js", 
            "shortname": "FB.XFBML.ProfilePic"
        }, 
        "FB": {
            "file": "loader.js", 
            "description": "Provide a lowest level base functions for Connect JS. We should only place\n commonly used generally purpose methods in this namespace\n Every methods in this file are in FB namespace.", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Type", 
            "methods": {
                "$": {
                    "return": {
                        "type": "", 
                        "description": "DOMElement"
                    }, 
                    "params": [
                        {
                            "type": "string", 
                            "name": "DOM", 
                            "description": " id"
                        }
                    ], 
                    "description": "Shortcut for document.getElementById"
                }, 
                "provide": {
                    "description": "Provide a module or static class methods with fully qualified namespace. The name\n is a dot separated string. The feature is an object from which\n properties are _copied_ into the target.\n Example:\n FB.provide('Server.Auth', {\n   init: function() {\n     // ...\n   }\n });", 
                    "access": "protected", 
                    "static": "", 
                    "guessedname": "provide", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "name", 
                            "description": "      a dot separated string naming the feature"
                        }, 
                        {
                            "type": "Object", 
                            "name": "feature", 
                            "description": "   the feature being provided"
                        }, 
                        {
                            "type": "Boolean", 
                            "name": "append", 
                            "description": "   indicate if an existing object should be\n                          appended defaults to false. this need to be\n                          explicit to detect inadvertent redefinition of\n                          features."
                        }
                    ]
                }, 
                "bind": {
                    "description": "Bind a function to a given context and arguments.", 
                    "access": "protected", 
                    "returns": "{Function}   the bound function", 
                    "static": "", 
                    "guessedname": "bind", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "Function", 
                            "name": "fn", 
                            "description": "  the function to bind"
                        }, 
                        {
                            "type": "Object", 
                            "name": "context", 
                            "description": "     object to be used as the context when\n                             calling the function"
                        }, 
                        {
                            "type": "...", 
                            "name": "arguments", 
                            "description": "    additional arguments to be bound to the\n                             function"
                        }
                    ]
                }, 
                "create": {
                    "return": {
                        "type": "", 
                        "description": "object  The created object, or boolean if testOnly is true."
                    }, 
                    "description": "Create a namespaced object\n This create an fullly namespaced name.\n Examples:\n FB.create('XFBML.ProfilePic') = function() {...}\n   create FB.XFBML.ProfilePic and assign the value of the function. If FB.XFBML does not exist, this call\n   would automatically create it.\n FB.create('Util');\n   create a namespace FB.Util if it doesn't already exist;\n FB.create('Util.foo', null, true)\n   Check if FB.Util.foo exists", 
                    "access": "private", 
                    "static": "", 
                    "guessedname": "create", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " full qualified name ('Util.foo', etc.)"
                        }, 
                        {
                            "type": "string} value value to set. Default value is {", 
                            "name": ".", 
                            "description": " [Optional]"
                        }, 
                        {
                            "type": "bool", 
                            "name": "testOnly", 
                            "description": " This is an optional parameter. If set to true, then the function\n                  will only check if the name exists. [Optional]"
                        }
                    ]
                }, 
                "subclass": {
                    "static": "", 
                    "params": [
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " class name"
                        }, 
                        {
                            "type": "string", 
                            "name": "baseName,", 
                            "description": ""
                        }, 
                        {
                            "type": "function", 
                            "name": "constructor", 
                            "description": " class constructor"
                        }, 
                        {
                            "type": "object", 
                            "name": "proto", 
                            "description": " instance methods for class"
                        }
                    ], 
                    "description": "Create a subclass\n Note: To call base class constructor, use this._base(...).\n If you override a method 'foo' but still want to call\n the base class's method 'foo', use this._callBase('foo', ...)", 
                    "guessedname": "subclass", 
                    "guessedtype": "function"
                }, 
                "forEach": {
                    "static": "", 
                    "params": [
                        {
                            "type": "", 
                            "name": "item", 
                            "description": "   Variant   an Array or an Object"
                        }, 
                        {
                            "type": "", 
                            "name": "fn", 
                            "description": "     Function  the callback function for iteration"
                        }, 
                        {
                            "type": "", 
                            "name": "proto", 
                            "description": "  Boolean   indicate if properties from the prototype should\n                         be included"
                        }
                    ], 
                    "description": "For looping through Arrays and Objects.", 
                    "guessedname": "forEach", 
                    "guessedtype": "function"
                }, 
                "copy": {
                    "access": "protected", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "target", 
                            "description": "      the target object where things will be copied\n                            into"
                        }, 
                        {
                            "type": "Object", 
                            "name": "source", 
                            "description": "      the source object where things will be copied\n                            from"
                        }, 
                        {
                            "type": "Boolean", 
                            "name": "overwrite", 
                            "description": "  indicate if existing items should be\n                            overwritten"
                        }, 
                        {
                            "type": "function", 
                            "name": "tranform", 
                            "description": "   [Optional], transformation function for each item"
                        }
                    ], 
                    "description": "Copies things from source into target.", 
                    "guessedname": "copy", 
                    "guessedtype": "function"
                }, 
                "Class": {
                    "static": "", 
                    "params": [
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " class name"
                        }, 
                        {
                            "type": "function", 
                            "name": "constructor", 
                            "description": " class constructor"
                        }, 
                        {
                            "type": "object", 
                            "name": "proto", 
                            "description": " instance methods for class"
                        }
                    ], 
                    "description": "Create a new class.\n Note: I have to use 'Class' instead of 'class' because 'class' is\n a reserved (but unused) keyword.", 
                    "guessedname": "Class", 
                    "guessedtype": "function"
                }
            }, 
            "guessedname": "FB", 
            "guessedtype": "property", 
            "shortname": "FB", 
            "name": "FB"
        }, 
        "FB.App": {
            "name": "FB.App", 
            "namespace": "", 
            "provides": "FB.App", 
            "methods": {
                "monitor": {
                    "static": "", 
                    "params": [
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " Name of event. possible values are 'session', 'status', 'init'"
                        }, 
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " A callback function. arguments may be passed to the callback.\n     If the callback function returns true, the event will be unsubscribed."
                        }, 
                        {
                            "type": "bool", 
                            "name": "no_sync_callback", 
                            "description": " By default, the callback will be invoked immediately before\n    the event is fired, unless this parameter specified a true value"
                        }, 
                        {
                            "type": "bool", 
                            "name": "auto_unsubscribe", 
                            "description": " By default, the callback will be invoked whenever the event fires.\n      However, if this parameter value is true, the callback will be unsubscribed from the event after\n      it is fired once."
                        }
                    ], 
                    "description": "Watch for changes in FB.App.", 
                    "guessedname": "monitor", 
                    "guessedtype": "function"
                }, 
                "_checkStatus": {
                    "guessedname": "_checkStatus", 
                    "static": "", 
                    "description": "This function create an hidden iframe to login_status.lphp", 
                    "private": "", 
                    "guessedtype": "function"
                }, 
                "init": {
                    "static": "", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "apiKey", 
                            "description": "\n API key for your Facebook application"
                        }, 
                        {
                            "type": "Object", 
                            "name": "settings", 
                            "description": "\n An optional dictionary of other application settings.\n Currently supported key/value are:"
                        }
                    ], 
                    "description": "initialize an Facebook app. xdChannelUrl parameter may not be needed if stats shows postMessage and flash XdComm have enough coverage", 
                    "guessedname": "init", 
                    "guessedtype": "function"
                }, 
                "logout": {
                    "static": "", 
                    "params": [
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " This function will be called when operation is completed"
                        }
                    ], 
                    "description": "Log out of current session and facebook if current session.\n Note this method is a separate component because logout method\n is not always needed.", 
                    "guessedname": "logout", 
                    "guessedtype": "function"
                }, 
                "connect": {
                    "static": "", 
                    "params": [
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " Callback to be invoked after connect result is known"
                        }, 
                        {
                            "type": "object", 
                            "name": "options", 
                            "description": ""
                        }
                    ], 
                    "description": "Add connect method to FB.App\n This method is in a separate component because App's don't always\n need to call connect method.", 
                    "guessedname": "connect", 
                    "guessedtype": "function"
                }, 
                "_onStatus": {
                    "guessedname": "_onStatus", 
                    "static": "", 
                    "description": "callback handler when status string returned from somewhere (login_status,\n login.php, etc.) Our existing wire prototype is not clean (not JSON\n encoded), so we basically do some simple parsing for now.", 
                    "private": "", 
                    "guessedtype": "function"
                }
            }, 
            "file": "api.js", 
            "shortname": "FB.App", 
            "properties": {
                "status": {
                    "type": "string", 
                    "static": "", 
                    "description": "current connect status. Note we use undefined\n to signal that we don't know yet", 
                    "guessedname": "status", 
                    "guessedtype": "property"
                }, 
                "session": {
                    "type": "object", 
                    "static": "", 
                    "description": "current session.\n When session exists, it is standard session structure that contains session_key,\n uid, session_secret, expire_time\n Note we use undefined\n to signal that we don't know yet", 
                    "guessedname": "session", 
                    "guessedtype": "property"
                }, 
                "settings": {
                    "type": "object", 
                    "static": "", 
                    "description": "A dictionary of advanced facebook settings.\n Currently supported key/value are:", 
                    "guessedname": "settings", 
                    "guessedtype": "property"
                }
            }, 
            "description": "This module provides application settings, states (session states, permissions, etc.) and auth related\n methods (connect, logout)"
        }, 
        "FB.XFBML.Element": {
            "name": "FB.XFBML.Element", 
            "namespace": "", 
            "provides": "FB.XFBML.Element", 
            "methods": {
                "getAttribute": {
                    "return": {
                        "type": "", 
                        "description": "Object"
                    }, 
                    "params": [
                        {
                            "type": "String", 
                            "name": "name", 
                            "description": "\n Name of the attribute"
                        }, 
                        {
                            "type": "Object", 
                            "name": "defaultValue", 
                            "description": "\n Default value for the\n attribute, if it isn't set."
                        }
                    ], 
                    "description": "Get the value of an attribute associated with this tag.", 
                    "guessedname": "getAttribute", 
                    "guessedtype": "function"
                }, 
                "isValid": {
                    "description": "Check if this node is still valid and in the document.", 
                    "guessedname": "isValid", 
                    "guessedtype": "function"
                }
            }, 
            "file": "async.js", 
            "shortname": "FB.XFBML.Element", 
            "description": "Base class for all XFBML element\n Note: we removed support for condition attribute that was in V1."
        }, 
        "FB.UI.PopupWin": {
            "name": "FB.UI.PopupWin", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.UI.PopupWin", 
            "file": "iframeresizer.js", 
            "shortname": "FB.UI.PopupWin", 
            "methods": {
                "close": {
                    "description": "Close this popup window", 
                    "guessedname": "close", 
                    "guessedtype": "function"
                }
            }
        }, 
        "FB.Data": {
            "name": "FB.Data", 
            "namespace": "", 
            "provides": "FB.Data", 
            "methods": {
                "query": {
                    "return": {
                        "type": "FB.Data.Query", 
                        "description": "An async query object that contains query result"
                    }, 
                    "description": "Perform a FQL query\n Example:\n <pre class=\"prettyprint js\">\n // Get random 5 friends ids\n var friends = FB.Data.query('select uid2 from friend where uid1={0} ORDER BY rand() limit 5', FB.App.session.uid);\n var friendInfos = FB.Data.query(\n      'select name, pic from user where uid in (select uid2 from {0})', friends);\n friendInfos.wait(function(data) {\n   // Render info. For illustration of API, I am using any XFBML tags\n   var html = '';\n   FB.forEach(data, function(info) {\n     html += 'name=' + info.name + 'img=' + info.pic;\n   });\n   FB.$('infos').innerHTML = html;\n });\n </pre>", 
                    "static": "", 
                    "guessedname": "query", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "string", 
                            "name": "template", 
                            "description": " FQL query string template. It can contains optional\n                 formated parameters. When these\n                 parameters are used in the string, the actual data should\n                 be passed as parameter following the template parameter."
                        }, 
                        {
                            "type": "object", 
                            "name": "data", 
                            "description": " optional 0-n arguments of data"
                        }
                    ]
                }, 
                "_selectByIndex": {
                    "guessedname": "_selectByIndex", 
                    "static": "", 
                    "description": "Alternate method from query, this method is more specific\n but more efficient. We use it internally", 
                    "private": "", 
                    "guessedtype": "function"
                }, 
                "_mergeIndexQuery": {
                    "guessedname": "_mergeIndexQuery", 
                    "static": "", 
                    "description": "Check if y can be merged into x", 
                    "private": "", 
                    "guessedtype": "function"
                }
            }, 
            "file": "debug.js", 
            "shortname": "FB.Data", 
            "description": "Data access class for accessing Facebook data efficiently"
        }, 
        "FB.IframeResizer": {
            "name": "FB.IframeResizer", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.IframeResizer", 
            "file": "dialog.js", 
            "shortname": "FB.IframeResizer", 
            "description": "This class enable service to allow iframe to request size changes"
        }, 
        "FB.Async": {
            "name": "FB.Async", 
            "namespace": "", 
            "provides": "FB.Async", 
            "methods": {
                "eval": {
                    "static": "", 
                    "params": [
                        {
                            "type": "string | function", 
                            "name": "a", 
                            "description": " string or a function will be evaluated when all data are ready"
                        }
                    ], 
                    "data": "a list of objects that needs to be evaluted when they are ready", 
                    "guessedname": "eval", 
                    "guessedtype": "function"
                }, 
                "wait": {
                    "static": "", 
                    "description": "Given a list of potential async data,\n wait until they are all ready", 
                    "guessedname": "wait", 
                    "guessedtype": "function"
                }
            }, 
            "file": "data.js", 
            "shortname": "FB.Async", 
            "description": "Async operations"
        }, 
        "FB.Dom": {
            "name": "FB.Dom", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Dom", 
            "methods": {
                "getWindowSize": {
                    "static": "", 
                    "return": {
                        "type": "", 
                        "description": "FB.Size"
                    }, 
                    "description": "Get browser window size\n windowSize", 
                    "guessedname": "getWindowSize", 
                    "guessedtype": "function"
                }, 
                "addCss": {
                    "static": "", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "dom", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "newClass", 
                            "description": ""
                        }
                    ], 
                    "guessedname": "addCss", 
                    "guessedtype": "function"
                }, 
                "createHiddenIFrame": {
                    "static": "", 
                    "description": "Create a hidden iframe", 
                    "guessedname": "createHiddenIFrame", 
                    "guessedtype": "function"
                }, 
                "createId": {
                    "static": "", 
                    "return": {
                        "type": "string", 
                        "description": "an unique DOM id"
                    }, 
                    "description": "Create an unique DOM id", 
                    "guessedname": "createId", 
                    "guessedtype": "function"
                }, 
                "removeDom": {
                    "static": "", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "element", 
                            "description": ""
                        }
                    ], 
                    "description": "Remove a dom element from dom tree", 
                    "guessedname": "removeDom", 
                    "guessedtype": "function"
                }, 
                "addScript": {
                    "static": "", 
                    "description": "Dynamically add a script tag", 
                    "guessedname": "addScript", 
                    "guessedtype": "function"
                }, 
                "addEventListener": {
                    "static": "", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "element", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "type", 
                            "description": ""
                        }, 
                        {
                            "type": "Function", 
                            "name": "handler", 
                            "description": "\n handler should be a function with no parameters."
                        }
                    ], 
                    "description": "Cross browser way to add event listener to a DOM element, window or document object.", 
                    "guessedname": "addEventListener", 
                    "guessedtype": "function"
                }, 
                "getWindowLocation": {
                    "static": "", 
                    "return": {
                        "type": "", 
                        "description": "FB.Point"
                    }, 
                    "description": "Get location of the browser window relative to computer screen\n windowLocation", 
                    "guessedname": "getWindowLocation", 
                    "guessedtype": "function"
                }, 
                "getBrowserType": {
                    "static": "", 
                    "return": {
                        "type": "", 
                        "description": "string 'ie' | 'mozilla' |'safari' | 'other'"
                    }, 
                    "description": "Get browser type", 
                    "guessedname": "getBrowserType", 
                    "guessedtype": "function"
                }, 
                "removeCss": {
                    "static": "", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "dom", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "className", 
                            "description": ""
                        }
                    ], 
                    "guessedname": "removeCss", 
                    "guessedtype": "function"
                }, 
                "containsCss": {
                    "return": {
                        "type": "", 
                        "description": "Boolean"
                    }, 
                    "static": "", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "dom", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "className", 
                            "description": ""
                        }
                    ], 
                    "guessedname": "containsCss", 
                    "guessedtype": "function"
                }
            }, 
            "file": "xfbml.js", 
            "shortname": "FB.Dom", 
            "description": "This provides helper methods related to DOM"
        }, 
        "FB.Async.Data": {
            "name": "FB.Async.Data", 
            "constructors": [
                {
                    "params": [
                        {
                            "type": "object", 
                            "name": "value", 
                            "description": " [Optional] value of the data, if available."
                        }
                    ], 
                    "description": "Constructor"
                }
            ], 
            "namespace": "", 
            "provides": "FB.Async", 
            "file": "data.js", 
            "shortname": "FB.Async.Data", 
            "description": "An node that holds data that may not be available immediately"
        }, 
        "FB.Delegate": {
            "name": "FB.Delegate", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Event", 
            "file": "base.js", 
            "shortname": "FB.Delegate"
        }, 
        "FB.Event": {
            "name": "FB.Event", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Event", 
            "methods": {
                "fire": {
                    "static": "", 
                    "params": [
                        {
                            "type": "object", 
                            "name": "obj", 
                            "description": " object that exposes the named event"
                        }, 
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " Name of event"
                        }, 
                        {
                            "type": "object", 
                            "name": "args0,", 
                            "description": " .., argN arguments to be passed to callback\n functions\n   that subscribed to the event"
                        }
                    ], 
                    "description": "Fire an event on the given object", 
                    "guessedname": "fire", 
                    "guessedtype": "function"
                }, 
                "add": {
                    "static": "", 
                    "params": [
                        {
                            "type": "object", 
                            "name": "obj", 
                            "description": " object that exposes the named event"
                        }, 
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " Name of event"
                        }, 
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " A callback function.\n arguments may be passed to the callback. If the callback function\n returns true, the event will be subscribed."
                        }
                    ], 
                    "description": "Subscribe to an event on the given object\n Example:\n FB.Event.add(FB.App, 'session', function(session) {\n   if (session) {\n     // Yeah!. User is connected\n     ...\n     return true; // I don't need to listen anymore\n   }\n   // Hmm. no session. Keep listening\n }", 
                    "guessedname": "add", 
                    "guessedtype": "function"
                }, 
                "monitor": {
                    "static": "", 
                    "params": [
                        {
                            "type": "object", 
                            "name": "obj", 
                            "description": " object that exposes the named event"
                        }, 
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " Name of event."
                        }, 
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " A callback function. arguments may be passed to the callback.\n     If the callback function returns true, the event will be unsubscribed."
                        }, 
                        {
                            "type": "bool", 
                            "name": "no_sync_callback", 
                            "description": " By default, the callback will be invoked immediately before\n    the event is fired, unless this parameter specified a true value"
                        }, 
                        {
                            "type": "bool", 
                            "name": "auto_unsubscribe", 
                            "description": " By default, the callback will be invoked whenever the event fires.\n      However, if this parameter value is true, the callback will be unsubscribed from the event after\n      it is fired once."
                        }
                    ], 
                    "description": "Watch for changes", 
                    "guessedname": "monitor", 
                    "guessedtype": "function"
                }, 
                "remove": {
                    "static": "", 
                    "params": [
                        {
                            "type": "object", 
                            "name": "obj", 
                            "description": " object that exposes the named event"
                        }, 
                        {
                            "type": "string", 
                            "name": "name", 
                            "description": " Name of event"
                        }, 
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": " previous callback function passed to\n        FB.Event.add"
                        }
                    ], 
                    "description": "Unsubscribe to an event on the given object. Note you can also unsubscribe an event\n by simply return true in the callback function provided to FB.Event.subscribe.\n Example:\n FB.Event.add(FB.App, 'connectState', mycallback);\n ...\n // Dont' need to subscribe to the event anymore\n FB.Event.remove(FB.App, 'connectState', mycallback);", 
                    "guessedname": "remove", 
                    "guessedtype": "function"
                }
            }, 
            "file": "base.js", 
            "shortname": "FB.Event", 
            "description": "Basic Event system"
        }, 
        "FB.JSON": {
            "name": "FB.JSON", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.JSON", 
            "methods": {
                "sign": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "description": "Generate the signature that Facebook expects from the parameters\n by appending them all in a string with your application secret,\n and taking the MD5 of that.", 
                    "static": "", 
                    "guessedname": "sign", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "parameters", 
                            "description": "\n The parameters to use in the signature"
                        }, 
                        {
                            "type": "String", 
                            "name": "secret", 
                            "description": "\n Secret to use to sign the parameters"
                        }
                    ]
                }
            }, 
            "file": "dom.js", 
            "shortname": "FB.JSON", 
            "description": "JSON functions"
        }, 
        "FB.Util": {
            "name": "FB.Util", 
            "description": "Helper class for XFBML", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Helper\n fblayer XFBML", 
            "file": "name.js", 
            "shortname": "FB.Util", 
            "methods": {
                "upperCaseFirstChar": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "static": "", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "s", 
                            "description": ""
                        }
                    ], 
                    "guessedname": "upperCaseFirstChar", 
                    "guessedtype": "function"
                }, 
                "getFacebookUrl": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "description": "Gets a reference to the statically stored base Facebook URL, and adjusts for the desired subdomain.", 
                    "static": "", 
                    "guessedname": "getFacebookUrl", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "subDomain", 
                            "description": "\n Subdomain of Facebook to use"
                        }
                    ]
                }, 
                "format": {
                    "static": "", 
                    "description": "Format a string\n Example:FB.Util.format('{0}.facebook.com/{1}', 'www', 'login.php') returns\n 'www.facebook.com/login.php'", 
                    "guessedname": "format", 
                    "guessedtype": "function"
                }, 
                "obj2array": {
                    "static": "", 
                    "description": "Create an array from the keys in an object\n Example: obj2array({'x': 2, 'y': 3'}) returns ['x', 'y']", 
                    "guessedname": "obj2array", 
                    "guessedtype": "function"
                }, 
                "getProfileLink": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "description": "link to the explicit href or profile.php", 
                    "static": "", 
                    "guessedname": "getProfileLink", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "FB.UserInfo", 
                            "name": "userInfo", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "html", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "href", 
                            "description": ""
                        }
                    ]
                }, 
                "createUnique": {
                    "static": "", 
                    "description": "Create an unique id string", 
                    "guessedname": "createUnique", 
                    "guessedtype": "function"
                }, 
                "isUser": {
                    "static": "", 
                    "params": [
                        {
                            "type": "uid", 
                            "name": "id", 
                            "description": ""
                        }
                    ], 
                    "description": "Check if an id is an user id, instead of a page id\n [NOTE:] This code is based on is_user_id function in our server code.\n If that function changes, we'd have to update this one as well.", 
                    "guessedname": "isUser", 
                    "guessedtype": "function"
                }
            }
        }, 
        "FB.Loader": {
            "name": "FB.Loader", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Loader.use", 
            "methods": {
                "_check": {
                    "static": "", 
                    "return": {
                        "type": "", 
                        "description": "true if it is done"
                    }, 
                    "description": "Check if a comp if fullfilled", 
                    "guessedname": "_check", 
                    "guessedtype": "function"
                }, 
                "onScriptLoaded": {
                    "static": "", 
                    "description": "This function will be invoked at end of each connect.php load", 
                    "guessedname": "onScriptLoaded", 
                    "guessedtype": "function"
                }
            }, 
            "file": "type.js", 
            "shortname": "FB.Loader", 
            "description": "This base loader that does housekeeping of loaded components and support\n automatic loading of required css for a a component."
        }, 
        "FB.Data.Query": {
            "name": "FB.Data.Query", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Data", 
            "extends": "FB.Async.Data", 
            "superclass": "FB.Async.Data", 
            "file": "debug.js", 
            "shortname": "FB.Data.Query", 
            "description": "Query class that represent a FQL query"
        }, 
        "FB.XdComm": {
            "name": "FB.XdComm", 
            "constructors": [
                {
                    "params": [
                        {
                            "type": "String", 
                            "name": "rpcServerName", 
                            "description": "\n Name of the server"
                        }, 
                        {
                            "type": "Object", 
                            "name": "registeredMethodMap", 
                            "description": "\n Methods to register as \"legal\" to be\n called from this server"
                        }
                    ], 
                    "description": "Register an RPC service. This allow us backward compatibility that would make migration from v1\n smoother since we will have to support both for some time."
                }
            ], 
            "namespace": "", 
            "private": "", 
            "provides": "FB.XdComm", 
            "methods": {
                "decode": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "description": "Custom decoding to workaround bug in flash's ExternInterface\n Code is from Dojo's library", 
                    "static": "", 
                    "guessedname": "decode", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "data", 
                            "description": ""
                        }
                    ]
                }, 
                "onReceiverLoaded": {
                    "static": "", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "hash", 
                            "description": ""
                        }
                    ], 
                    "description": "This method should be called by XdCommReceiver.js only!", 
                    "guessedname": "onReceiverLoaded", 
                    "guessedtype": "function"
                }, 
                "init": {
                    "static": "", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "Optional", 
                            "description": " xd receiver url"
                        }
                    ], 
                    "description": "Initialize XdComm", 
                    "guessedname": "init", 
                    "guessedtype": "function"
                }, 
                "getUdp": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "description": "Create an url that can be used to send a UDP like single message to\n the specified end point when this url is opened.", 
                    "static": "", 
                    "guessedname": "getUdp", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "function", 
                            "name": "callback", 
                            "description": ""
                        }, 
                        {
                            "type": "Object", 
                            "name": "data", 
                            "description": "\n data to send."
                        }, 
                        {
                            "type": "FB.XdComm.EndPoint", 
                            "name": "endPoint", 
                            "description": "\n target to send message to"
                        }, 
                        {
                            "type": "FB.XdComm.PacketDataFormat", 
                            "name": "dataFormat", 
                            "description": "\n format of data attached to string, default JSON"
                        }
                    ]
                }
            }, 
            "file": "popupdlg.js", 
            "shortname": "FB.XdComm", 
            "properties": {
                "receiverUrl": {
                    "type": "String", 
                    "static": "", 
                    "guessedname": "receiverUrl", 
                    "guessedtype": "property"
                }, 
                "_id": {
                    "type": "String", 
                    "static": "", 
                    "guessedname": "_id", 
                    "guessedtype": "property"
                }
            }, 
            "description": "Server for cross domain communication"
        }, 
        "FB.XFBML": {
            "name": "FB.XFBML", 
            "namespace": "", 
            "provides": "FB.XFBML", 
            "methods": {
                "parse": {
                    "static": "", 
                    "params": [], 
                    "description": "Parse and render XFBML markup inside a DOM element", 
                    "guessedname": "parse", 
                    "guessedtype": "function"
                }, 
                "_processElement": {
                    "guessedname": "_processElement", 
                    "static": "", 
                    "description": "Process an XFBML element", 
                    "private": "", 
                    "guessedtype": "function"
                }, 
                "set": {
                    "static": "", 
                    "params": [
                        {
                            "type": "DOMElement", 
                            "name": "dom", 
                            "description": "  DOM element"
                        }, 
                        {
                            "type": "string", 
                            "name": "markup", 
                            "description": " XFBML markup. It may contain reguarl HTML markup as well."
                        }
                    ], 
                    "description": "Set XFBML markup on a given DOM node. This is like\n setInnerHTML\n Example: FB.XFBML.set($('container', '<fb:name uid=\"4\"></fb:name><div>.....')", 
                    "guessedname": "set", 
                    "guessedtype": "function"
                }, 
                "_getDoms": {
                    "return": {
                        "type": "", 
                        "description": "DOMElementCollection"
                    }, 
                    "private": "", 
                    "static": "", 
                    "guessedname": "_getDoms", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "element", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "xmlns", 
                            "description": ""
                        }, 
                        {
                            "type": "String", 
                            "name": "localName", 
                            "description": ""
                        }
                    ]
                }, 
                "registerTag": {
                    "static": "", 
                    "params": [
                        {
                            "type": "object", 
                            "name": "An", 
                            "description": " array of the format ['<xmls-namespace>', '<tag-name>',\n       '<name of the JS class that implements the tag>']"
                        }
                    ], 
                    "description": "Register a custom XFBML Tag\n Example: FB.XFBML.registerTag('digg', 'digg-button', 'Digg.DiggButton'])", 
                    "guessedname": "registerTag", 
                    "guessedtype": "function"
                }
            }, 
            "file": "app.js", 
            "shortname": "FB.XFBML", 
            "description": "This provides public APIs for developer to programming XFBML"
        }, 
        "FB.XFBML.Name": {
            "name": "FB.XFBML.Name", 
            "namespace": "", 
            "provides": "FB.XFBML.Name", 
            "extends": "FB.XFBML.Element", 
            "superclass": "FB.XFBML.Element", 
            "file": "profilepic.js", 
            "shortname": "FB.XFBML.Name", 
            "methods": {
                "_renderOther": {
                    "description": "Handle rendering of the element, using the\n metadata that came with it.", 
                    "guessedname": "_renderOther", 
                    "guessedtype": "function"
                }, 
                "_renderPronoun": {
                    "description": "Given this name, figure out the proper (English) pronoun for it.", 
                    "guessedname": "_renderPronoun", 
                    "guessedtype": "function"
                }
            }
        }, 
        "FB.UI.Dialog": {
            "name": "FB.UI.Dialog", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.UI.Dialog", 
            "methods": {
                "getContainer": {
                    "static": "", 
                    "return": {
                        "type": "", 
                        "description": "Object"
                    }, 
                    "description": "_popupContainer", 
                    "guessedname": "getContainer", 
                    "guessedtype": "function"
                }
            }, 
            "file": "sharebutton.js", 
            "shortname": "FB.UI.Dialog", 
            "description": "An iframe dialog"
        }, 
        "FB.Uri": {
            "name": "FB.Uri", 
            "namespace": "", 
            "private": "", 
            "provides": "FB.Uri", 
            "methods": {
                "createQueryString": {
                    "return": {
                        "type": "", 
                        "description": "String"
                    }, 
                    "description": "Given a dictionary mapping name to param\n returns a query string with encoded values.", 
                    "static": "", 
                    "guessedname": "createQueryString", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "Object", 
                            "name": "q_params", 
                            "description": "\n the dictionary"
                        }, 
                        {
                            "type": "function", 
                            "name": "optional", 
                            "description": " encoder for values"
                        }
                    ]
                }, 
                "getQueryParameters": {
                    "description": "Decode a query string into a parameters object.", 
                    "access": "private", 
                    "returns": "{Object} the parameters to encode", 
                    "static": "", 
                    "guessedname": "getQueryParameters", 
                    "guessedtype": "function", 
                    "params": [
                        {
                            "type": "String", 
                            "name": "str", 
                            "description": "  the query string"
                        }
                    ]
                }
            }, 
            "file": "md5.js", 
            "shortname": "FB.Uri", 
            "description": "Uri related functions\n Note: I am creating a separate Uri component instead of putting it into\n FB.Util because I expect that we will add more Uri related methods back\n over time."
        }, 
        "FB.XFBML.ShareButton": {
            "name": "FB.XFBML.ShareButton", 
            "namespace": "", 
            "provides": "FB.XFBML.ShareButton", 
            "extends": "FB.XFBML.Element", 
            "superclass": "FB.XFBML.Element", 
            "file": "loginbutton.js", 
            "shortname": "FB.XFBML.ShareButton", 
            "description": "Implementation for fb:share-button tag."
        }
    }, 
    "version": "1.0.0", 
    "modules": {
        "FB.XFBML.LoginButton": {
            "layer": "XFBML", 
            "name": "FB.XFBML.LoginButton", 
            "submodules": [], 
            "classlist": [
                "FB.XFBML.LoginButton"
            ], 
            "filelist": [
                "loginbutton.js"
            ], 
            "subdata": {}, 
            "fullPath": "tags/loginbutton.js", 
            "requires": "FB.Type FB.XFBML.Element"
        }, 
        "FB.Api": {
            "layer": "Basic", 
            "name": "FB.Api", 
            "submodules": [], 
            "classlist": [
                "FB.Api"
            ], 
            "filelist": [
                "api.js"
            ], 
            "subdata": {}, 
            "fullPath": "api.js", 
            "requires": "FB.App FB.Base FB.Md5 FB.Util FB.Uri FB.Dom"
        }, 
        "FB.share-button-css": {
            "layer": "XFBML", 
            "description": "author arunv", 
            "submodules": [], 
            "classlist": [], 
            "filelist": [
                "share_button_css.js"
            ], 
            "subdata": {}, 
            "fullPath": "css/share_button_css.js", 
            "requires": "FB.connect-button-css FB.Dom", 
            "name": "FB.share-button-css"
        }, 
        "FB.XFBML.ProfilePic": {
            "layer": "XFBML", 
            "name": "FB.XFBML.ProfilePic", 
            "submodules": [], 
            "classlist": [
                "FB.XFBML.ProfilePic"
            ], 
            "filelist": [
                "profilepic.js"
            ], 
            "subdata": {}, 
            "fullPath": "tags/profilepic.js", 
            "requires": "FB.Type FB.XFBML FB.Event FB.Util FB.Dom FB.XFBML.Element FB.Data FB.Helper"
        }, 
        "FB.App": {
            "layer": "Basic", 
            "name": "FB.App", 
            "submodules": [], 
            "classlist": [
                "FB.App"
            ], 
            "filelist": [
                "app.js"
            ], 
            "subdata": {}, 
            "fullPath": "app.js", 
            "requires": "FB.Base FB.Event FB.XdComm FB.UI.PopupWin, FB.UI.Dialog FB.Dom"
        }, 
        "FB.XFBML.Element": {
            "layer": "XFBML", 
            "name": "FB.XFBML.Element", 
            "submodules": [], 
            "classlist": [
                "FB.XFBML.Element"
            ], 
            "filelist": [
                "element.js"
            ], 
            "subdata": {}, 
            "fullPath": "tags/element.js", 
            "requires": "FB.Type"
        }, 
        "FB.connect-button-css": {
            "layer": "XFBML", 
            "description": "author blaise", 
            "submodules": [], 
            "classlist": [], 
            "filelist": [
                "button_css.js"
            ], 
            "subdata": {}, 
            "option": "preserve-image-urls", 
            "fullPath": "css/button_css.js", 
            "requires": "FB.Dom", 
            "name": "FB.connect-button-css"
        }, 
        "FB.UI.PopupWin": {
            "layer": "Basic", 
            "name": "FB.UI.PopupWin", 
            "submodules": [], 
            "classlist": [
                "FB.UI.PopupWin"
            ], 
            "filelist": [
                "popupdlg.js"
            ], 
            "subdata": {}, 
            "fullPath": "ui/popupdlg.js", 
            "requires": "FB.Type FB.Util FB.Event FB.XdComm FB.Dom"
        }, 
        "FB.Data": {
            "layer": "Data", 
            "name": "FB.Data", 
            "submodules": [], 
            "classlist": [
                "FB.Data", 
                "FB.Data.Query"
            ], 
            "filelist": [
                "data.js"
            ], 
            "subdata": {}, 
            "fullPath": "data/data.js", 
            "requires": "FB.Base FB.Type FB.Util FB.Event FB.Api FB.Async FB.App"
        }, 
        "FB.IframeResizer": {
            "layer": "Basic", 
            "name": "FB.IframeResizer", 
            "submodules": [], 
            "classlist": [
                "FB.IframeResizer"
            ], 
            "filelist": [
                "iframeresizer.js"
            ], 
            "subdata": {}, 
            "fullPath": "ui/iframeresizer.js", 
            "requires": "FB.Base FB.XdComm"
        }, 
        "FB.Async": {
            "layer": "Data", 
            "name": "FB.Async", 
            "submodules": [], 
            "classlist": [
                "FB.Async", 
                "FB.Async.Data"
            ], 
            "filelist": [
                "async.js"
            ], 
            "subdata": {}, 
            "fullPath": "data/async.js", 
            "requires": "FB.Base FB.Type FB.Util FB.Event"
        }, 
        "FB.Dom": {
            "layer": "Basic", 
            "name": "FB.Dom", 
            "submodules": [], 
            "classlist": [
                "FB.Dom"
            ], 
            "filelist": [
                "dom.js"
            ], 
            "subdata": {}, 
            "fullPath": "common/dom.js", 
            "requires": "FB.Base"
        }, 
        "FB.Base": {
            "layer": "Basic", 
            "name": "FB.Base", 
            "submodules": [], 
            "classlist": [
                "FB"
            ], 
            "filelist": [
                "base.js"
            ], 
            "subdata": {}, 
            "fullPath": "core/base.js"
        }, 
        "FB.JSON": {
            "layer": "Basic", 
            "name": "FB.JSON", 
            "submodules": [], 
            "classlist": [
                "FB.JSON"
            ], 
            "filelist": [
                "json.js"
            ], 
            "subdata": {}, 
            "fullPath": "common/json.js", 
            "requires": "FB.Base"
        }, 
        "FB.Util": {
            "layer": "Basic", 
            "name": "FB.Util", 
            "submodules": [], 
            "classlist": [
                "FB.Util"
            ], 
            "filelist": [
                "util.js"
            ], 
            "subdata": {}, 
            "fullPath": "common/util.js", 
            "requires": "FB.Base"
        }, 
        "FB.Loader": {
            "layer": "Basic", 
            "name": "FB.Loader", 
            "submodules": [], 
            "classlist": [
                "FB.Loader"
            ], 
            "filelist": [
                "loader.js"
            ], 
            "subdata": {}, 
            "fullPath": "core/loader.js", 
            "requires": "FB.Base"
        }, 
        "FB.Md5": {
            "layer": "Basic", 
            "name": "FB.Md5", 
            "submodules": [], 
            "classlist": [], 
            "filelist": [
                "md5.js"
            ], 
            "subdata": {}, 
            "fullPath": "common/md5.js", 
            "requires": "FB.Base FB.Util"
        }, 
        "FB.Loader.use": {
            "layer": "Basic", 
            "name": "FB.Loader.use", 
            "submodules": [], 
            "classlist": [
                "FB.Loader"
            ], 
            "filelist": [
                "use.js"
            ], 
            "subdata": {}, 
            "fullPath": "core/use.js", 
            "requires": "FB.Loader FB.Util FB.Dom FB.Base"
        }, 
        "FB.Debug": {
            "layer": "Basic", 
            "name": "FB.Debug", 
            "submodules": [], 
            "classlist": [], 
            "filelist": [
                "debug.js"
            ], 
            "subdata": {}, 
            "fullPath": "core/debug.js", 
            "requires": "FB.Base"
        }, 
        "FB.Flash": {
            "layer": "Basic", 
            "name": "FB.Flash", 
            "submodules": [], 
            "classlist": [], 
            "filelist": [
                "flash.js"
            ], 
            "subdata": {}, 
            "fullPath": "xdcomm/flash.js", 
            "requires": "FB.Base FB.Event FB.Dom"
        }, 
        "FB.Event": {
            "layer": "Basic", 
            "name": "FB.Event", 
            "submodules": [], 
            "classlist": [
                "FB.Event", 
                "FB.Delegate"
            ], 
            "filelist": [
                "event.js"
            ], 
            "subdata": {}, 
            "fullPath": "core/event.js", 
            "requires": "FB.Type FB.Base"
        }, 
        "FB.XdComm": {
            "layer": "Basic", 
            "name": "FB.XdComm", 
            "submodules": [], 
            "classlist": [
                "FB.XdComm"
            ], 
            "filelist": [
                "xdcomm.js"
            ], 
            "subdata": {}, 
            "fullPath": "xdcomm/xdcomm.js", 
            "requires": "FB.Base  FB.Util\n           FB.Uri  FB.JSON FB.Event FB.Flash"
        }, 
        "FB.XFBML": {
            "layer": "XFBML", 
            "name": "FB.XFBML", 
            "submodules": [], 
            "classlist": [
                "FB.XFBML"
            ], 
            "filelist": [
                "xfbml.js"
            ], 
            "subdata": {}, 
            "fullPath": "xfbml.js", 
            "requires": "FB.Base FB.Loader.use FB.Loader"
        }, 
        "FB.XFBML.Name": {
            "layer": "XFBML", 
            "name": "FB.XFBML.Name", 
            "submodules": [], 
            "classlist": [
                "FB.XFBML.Name"
            ], 
            "filelist": [
                "name.js"
            ], 
            "subdata": {}, 
            "fullPath": "tags/name.js", 
            "requires": "FB.Type FB.XFBML FB.Event FB.Util FB.Dom FB.XFBML.Element FB.Data FB.Helper"
        }, 
        "FB.UI.Dialog": {
            "layer": "Basic", 
            "name": "FB.UI.Dialog", 
            "submodules": [], 
            "classlist": [
                "FB.UI.Dialog"
            ], 
            "filelist": [
                "dialog.js"
            ], 
            "subdata": {}, 
            "fullPath": "ui/dialog.js", 
            "requires": "FB.Type FB.Base FB.XdComm FB.Util FB.Dom FB.Event FB.IframeResizer"
        }, 
        "FB.Uri": {
            "layer": "Basic", 
            "name": "FB.Uri", 
            "submodules": [], 
            "classlist": [
                "FB.Uri"
            ], 
            "filelist": [
                "uri.js"
            ], 
            "subdata": {}, 
            "fullPath": "common/uri.js", 
            "requires": "FB.Base"
        }, 
        "FB.Helper\n fblayer XFBML": {
            "name": "FB.Helper\n fblayer XFBML", 
            "submodules": [], 
            "classlist": [
                "FB.Util"
            ], 
            "filelist": [
                "helper.js"
            ], 
            "subdata": {}, 
            "fullPath": "tags/helper.js", 
            "requires": "FB.Base"
        }, 
        "FB.Type": {
            "layer": "Basic", 
            "name": "FB.Type", 
            "submodules": [], 
            "classlist": [
                "FB"
            ], 
            "filelist": [
                "type.js"
            ], 
            "subdata": {}, 
            "fullPath": "core/type.js", 
            "requires": "FB.Base"
        }, 
        "FB.XFBML.ShareButton": {
            "layer": "XFBML", 
            "name": "FB.XFBML.ShareButton", 
            "submodules": [], 
            "classlist": [
                "FB.XFBML.ShareButton"
            ], 
            "filelist": [
                "sharebutton.js"
            ], 
            "subdata": {}, 
            "fullPath": "tags/sharebutton.js", 
            "requires": "FB.Type FB.XFBML FB.Event FB.Util FB.Dom FB.XFBML.Element\n  FB.Data FB.Helper FB.share-button-css"
        }
    }, 
    "filemap": {
        "element.js": {
            "classlist": [
                "FB.XFBML.ProfilePic"
            ], 
            "name": "element.js", 
            "provides": "FB.XFBML.Element"
        }, 
        "sharebutton.js": {
            "classlist": [
                "FB.UI.Dialog"
            ], 
            "name": "sharebutton.js", 
            "provides": "FB.XFBML.ShareButton"
        }, 
        "loginbutton.js": {
            "classlist": [
                "FB.XFBML.ShareButton"
            ], 
            "name": "loginbutton.js", 
            "provides": "FB.XFBML.LoginButton"
        }, 
        "use.js": {
            "classlist": [], 
            "name": "use.js", 
            "provides": "FB.Loader.use"
        }, 
        "debug.js": {
            "classlist": [
                "FB.Data", 
                "FB.Data.Query"
            ], 
            "name": "debug.js", 
            "provides": "FB.Debug"
        }, 
        "type.js": {
            "classlist": [
                "FB.Loader"
            ], 
            "name": "type.js", 
            "provides": "FB.Type"
        }, 
        "json.js": {
            "classlist": [], 
            "name": "json.js", 
            "provides": "FB.JSON"
        }, 
        "util.js": {
            "classlist": [
                "FB"
            ], 
            "name": "util.js", 
            "provides": "FB.Util"
        }, 
        "uri.js": {
            "classlist": [
                "FB.Util"
            ], 
            "name": "uri.js", 
            "provides": "FB.Uri"
        }, 
        "dom.js": {
            "classlist": [
                "FB.JSON"
            ], 
            "name": "dom.js", 
            "provides": "FB.Dom"
        }, 
        "button_css.js": {
            "classlist": [], 
            "name": "button_css.js", 
            "provides": "FB.connect-button-css"
        }, 
        "md5.js": {
            "classlist": [
                "FB.Uri"
            ], 
            "name": "md5.js", 
            "provides": "FB.Md5"
        }, 
        "data.js": {
            "classlist": [
                "FB.Async", 
                "FB.Async.Data"
            ], 
            "name": "data.js", 
            "provides": "FB.Data"
        }, 
        "share_button_css.js": {
            "classlist": [], 
            "name": "share_button_css.js", 
            "provides": "FB.share-button-css"
        }, 
        "dialog.js": {
            "classlist": [
                "FB.IframeResizer"
            ], 
            "name": "dialog.js", 
            "provides": "FB.UI.Dialog"
        }, 
        "iframeresizer.js": {
            "classlist": [
                "FB.UI.PopupWin"
            ], 
            "name": "iframeresizer.js", 
            "provides": "FB.IframeResizer"
        }, 
        "name.js": {
            "classlist": [
                "FB.Util"
            ], 
            "name": "name.js", 
            "provides": "FB.XFBML.Name"
        }, 
        "xfbml.js": {
            "classlist": [
                "FB.Dom"
            ], 
            "name": "xfbml.js", 
            "provides": "FB.XFBML"
        }, 
        "async.js": {
            "classlist": [
                "FB.XFBML.Element"
            ], 
            "name": "async.js", 
            "provides": "FB.Async"
        }, 
        "helper.js": {
            "classlist": [
                "FB.XFBML.LoginButton"
            ], 
            "name": "helper.js", 
            "provides": "FB.Helper\n fblayer XFBML"
        }, 
        "loader.js": {
            "classlist": [
                "FB"
            ], 
            "name": "loader.js", 
            "provides": "FB.Loader"
        }, 
        "api.js": {
            "classlist": [
                "FB.App"
            ], 
            "name": "api.js", 
            "provides": "FB.Api"
        }, 
        "profilepic.js": {
            "classlist": [
                "FB.XFBML.Name"
            ], 
            "name": "profilepic.js", 
            "provides": "FB.XFBML.ProfilePic"
        }, 
        "app.js": {
            "classlist": [
                "FB.XFBML"
            ], 
            "name": "app.js", 
            "provides": "FB.App"
        }, 
        "popupdlg.js": {
            "classlist": [
                "FB.XdComm"
            ], 
            "name": "popupdlg.js", 
            "provides": "FB.UI.PopupWin"
        }, 
        "event.js": {
            "classlist": [
                "FB.Loader"
            ], 
            "name": "event.js", 
            "provides": "FB.Event"
        }, 
        "base.js": {
            "classlist": [
                "FB.Event", 
                "FB.Delegate"
            ], 
            "name": "base.js", 
            "provides": "FB.Base"
        }, 
        "flash.js": {
            "classlist": [], 
            "name": "flash.js", 
            "provides": "FB.Flash"
        }, 
        "xdcomm.js": {
            "classlist": [], 
            "name": "xdcomm.js", 
            "provides": "FB.XdComm"
        }
    }
}